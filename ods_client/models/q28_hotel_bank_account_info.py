# coding: utf-8

"""
    HPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q28HotelBankAccountInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_no': 'str',
        'state': 'str',
        'iban': 'str',
        'bic': 'str',
        'account_owner': 'str',
        'mandate_id': 'str'
    }

    attribute_map = {
        'customer_no': 'CustomerNo',
        'state': 'State',
        'iban': 'IBAN',
        'bic': 'BIC',
        'account_owner': 'AccountOwner',
        'mandate_id': 'MandateID'
    }

    def __init__(self, customer_no=None, state=None, iban=None, bic=None, account_owner=None, mandate_id=None):  # noqa: E501
        """Q28HotelBankAccountInfo - a model defined in Swagger"""  # noqa: E501
        self._customer_no = None
        self._state = None
        self._iban = None
        self._bic = None
        self._account_owner = None
        self._mandate_id = None
        self.discriminator = None
        self.customer_no = customer_no
        self.state = state
        self.iban = iban
        self.bic = bic
        self.account_owner = account_owner
        if mandate_id is not None:
            self.mandate_id = mandate_id

    @property
    def customer_no(self):
        """Gets the customer_no of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The customer_no of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no):
        """Sets the customer_no of this Q28HotelBankAccountInfo.


        :param customer_no: The customer_no of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def state(self):
        """Gets the state of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The state of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Q28HotelBankAccountInfo.


        :param state: The state of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def iban(self):
        """Gets the iban of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The iban of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Q28HotelBankAccountInfo.


        :param iban: The iban of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501

        self._iban = iban

    @property
    def bic(self):
        """Gets the bic of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The bic of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this Q28HotelBankAccountInfo.


        :param bic: The bic of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """
        if bic is None:
            raise ValueError("Invalid value for `bic`, must not be `None`")  # noqa: E501

        self._bic = bic

    @property
    def account_owner(self):
        """Gets the account_owner of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The account_owner of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_owner

    @account_owner.setter
    def account_owner(self, account_owner):
        """Sets the account_owner of this Q28HotelBankAccountInfo.


        :param account_owner: The account_owner of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """
        if account_owner is None:
            raise ValueError("Invalid value for `account_owner`, must not be `None`")  # noqa: E501

        self._account_owner = account_owner

    @property
    def mandate_id(self):
        """Gets the mandate_id of this Q28HotelBankAccountInfo.  # noqa: E501


        :return: The mandate_id of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this Q28HotelBankAccountInfo.


        :param mandate_id: The mandate_id of this Q28HotelBankAccountInfo.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q28HotelBankAccountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q28HotelBankAccountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
