# coding: utf-8

"""
    HPP-V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q30PaymentLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'posting_date': 'str',
        'payment_method_code': 'str',
        'ext_document_no': 'str',
        'reservation': 'AllOfq30PaymentLineReservation',
        'currency_code': 'str'
    }

    attribute_map = {
        'posting_date': 'PostingDate',
        'payment_method_code': 'PaymentMethodCode',
        'ext_document_no': 'ExtDocumentNo',
        'reservation': 'Reservation',
        'currency_code': 'CurrencyCode'
    }

    def __init__(self, posting_date=None, payment_method_code=None, ext_document_no=None, reservation=None, currency_code=None):  # noqa: E501
        """Q30PaymentLine - a model defined in Swagger"""  # noqa: E501
        self._posting_date = None
        self._payment_method_code = None
        self._ext_document_no = None
        self._reservation = None
        self._currency_code = None
        self.discriminator = None
        self.posting_date = posting_date
        self.payment_method_code = payment_method_code
        self.ext_document_no = ext_document_no
        self.reservation = reservation
        self.currency_code = currency_code

    @property
    def posting_date(self):
        """Gets the posting_date of this Q30PaymentLine.  # noqa: E501


        :return: The posting_date of this Q30PaymentLine.  # noqa: E501
        :rtype: str
        """
        return self._posting_date

    @posting_date.setter
    def posting_date(self, posting_date):
        """Sets the posting_date of this Q30PaymentLine.


        :param posting_date: The posting_date of this Q30PaymentLine.  # noqa: E501
        :type: str
        """
        if posting_date is None:
            raise ValueError("Invalid value for `posting_date`, must not be `None`")  # noqa: E501

        self._posting_date = posting_date

    @property
    def payment_method_code(self):
        """Gets the payment_method_code of this Q30PaymentLine.  # noqa: E501


        :return: The payment_method_code of this Q30PaymentLine.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_code

    @payment_method_code.setter
    def payment_method_code(self, payment_method_code):
        """Sets the payment_method_code of this Q30PaymentLine.


        :param payment_method_code: The payment_method_code of this Q30PaymentLine.  # noqa: E501
        :type: str
        """
        if payment_method_code is None:
            raise ValueError("Invalid value for `payment_method_code`, must not be `None`")  # noqa: E501

        self._payment_method_code = payment_method_code

    @property
    def ext_document_no(self):
        """Gets the ext_document_no of this Q30PaymentLine.  # noqa: E501


        :return: The ext_document_no of this Q30PaymentLine.  # noqa: E501
        :rtype: str
        """
        return self._ext_document_no

    @ext_document_no.setter
    def ext_document_no(self, ext_document_no):
        """Sets the ext_document_no of this Q30PaymentLine.


        :param ext_document_no: The ext_document_no of this Q30PaymentLine.  # noqa: E501
        :type: str
        """
        if ext_document_no is None:
            raise ValueError("Invalid value for `ext_document_no`, must not be `None`")  # noqa: E501

        self._ext_document_no = ext_document_no

    @property
    def reservation(self):
        """Gets the reservation of this Q30PaymentLine.  # noqa: E501


        :return: The reservation of this Q30PaymentLine.  # noqa: E501
        :rtype: AllOfq30PaymentLineReservation
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this Q30PaymentLine.


        :param reservation: The reservation of this Q30PaymentLine.  # noqa: E501
        :type: AllOfq30PaymentLineReservation
        """
        if reservation is None:
            raise ValueError("Invalid value for `reservation`, must not be `None`")  # noqa: E501

        self._reservation = reservation

    @property
    def currency_code(self):
        """Gets the currency_code of this Q30PaymentLine.  # noqa: E501


        :return: The currency_code of this Q30PaymentLine.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Q30PaymentLine.


        :param currency_code: The currency_code of this Q30PaymentLine.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q30PaymentLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q30PaymentLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
