# coding: utf-8

"""
    HPP-V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q2Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_no': 'str',
        'name': 'str',
        'name2': 'str',
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'post_code': 'str'
    }

    attribute_map = {
        'invoice_no': 'InvoiceNo',
        'name': 'Name',
        'name2': 'Name2',
        'address': 'Address',
        'address2': 'Address2',
        'city': 'City',
        'post_code': 'PostCode'
    }

    def __init__(self, invoice_no=None, name=None, name2=None, address=None, address2=None, city=None, post_code=None):  # noqa: E501
        """Q2Invoice - a model defined in Swagger"""  # noqa: E501
        self._invoice_no = None
        self._name = None
        self._name2 = None
        self._address = None
        self._address2 = None
        self._city = None
        self._post_code = None
        self.discriminator = None
        self.invoice_no = invoice_no
        self.name = name
        self.name2 = name2
        self.address = address
        self.address2 = address2
        self.city = city
        self.post_code = post_code

    @property
    def invoice_no(self):
        """Gets the invoice_no of this Q2Invoice.  # noqa: E501


        :return: The invoice_no of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_no

    @invoice_no.setter
    def invoice_no(self, invoice_no):
        """Sets the invoice_no of this Q2Invoice.


        :param invoice_no: The invoice_no of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if invoice_no is None:
            raise ValueError("Invalid value for `invoice_no`, must not be `None`")  # noqa: E501

        self._invoice_no = invoice_no

    @property
    def name(self):
        """Gets the name of this Q2Invoice.  # noqa: E501


        :return: The name of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Q2Invoice.


        :param name: The name of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name2(self):
        """Gets the name2 of this Q2Invoice.  # noqa: E501


        :return: The name2 of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._name2

    @name2.setter
    def name2(self, name2):
        """Sets the name2 of this Q2Invoice.


        :param name2: The name2 of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if name2 is None:
            raise ValueError("Invalid value for `name2`, must not be `None`")  # noqa: E501

        self._name2 = name2

    @property
    def address(self):
        """Gets the address of this Q2Invoice.  # noqa: E501


        :return: The address of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Q2Invoice.


        :param address: The address of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Q2Invoice.  # noqa: E501


        :return: The address2 of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Q2Invoice.


        :param address2: The address2 of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if address2 is None:
            raise ValueError("Invalid value for `address2`, must not be `None`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Q2Invoice.  # noqa: E501


        :return: The city of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Q2Invoice.


        :param city: The city of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def post_code(self):
        """Gets the post_code of this Q2Invoice.  # noqa: E501


        :return: The post_code of this Q2Invoice.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this Q2Invoice.


        :param post_code: The post_code of this Q2Invoice.  # noqa: E501
        :type: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")  # noqa: E501

        self._post_code = post_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q2Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q2Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
