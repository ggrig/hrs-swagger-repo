# coding: utf-8

"""
    HPP-V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q22Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_no': 'str',
        'is_cancelled': 'str',
        'invoice_address': 'AllOfq22InvoiceInvoiceAddress',
        'positions': 'list[Q22Positions]'
    }

    attribute_map = {
        'doc_no': 'DocNo',
        'is_cancelled': 'IsCancelled',
        'invoice_address': 'InvoiceAddress',
        'positions': 'Positions'
    }

    def __init__(self, doc_no=None, is_cancelled=None, invoice_address=None, positions=None):  # noqa: E501
        """Q22Invoice - a model defined in Swagger"""  # noqa: E501
        self._doc_no = None
        self._is_cancelled = None
        self._invoice_address = None
        self._positions = None
        self.discriminator = None
        self.doc_no = doc_no
        self.is_cancelled = is_cancelled
        self.invoice_address = invoice_address
        self.positions = positions

    @property
    def doc_no(self):
        """Gets the doc_no of this Q22Invoice.  # noqa: E501


        :return: The doc_no of this Q22Invoice.  # noqa: E501
        :rtype: str
        """
        return self._doc_no

    @doc_no.setter
    def doc_no(self, doc_no):
        """Sets the doc_no of this Q22Invoice.


        :param doc_no: The doc_no of this Q22Invoice.  # noqa: E501
        :type: str
        """
        if doc_no is None:
            raise ValueError("Invalid value for `doc_no`, must not be `None`")  # noqa: E501

        self._doc_no = doc_no

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this Q22Invoice.  # noqa: E501


        :return: The is_cancelled of this Q22Invoice.  # noqa: E501
        :rtype: str
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this Q22Invoice.


        :param is_cancelled: The is_cancelled of this Q22Invoice.  # noqa: E501
        :type: str
        """
        if is_cancelled is None:
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def invoice_address(self):
        """Gets the invoice_address of this Q22Invoice.  # noqa: E501


        :return: The invoice_address of this Q22Invoice.  # noqa: E501
        :rtype: AllOfq22InvoiceInvoiceAddress
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this Q22Invoice.


        :param invoice_address: The invoice_address of this Q22Invoice.  # noqa: E501
        :type: AllOfq22InvoiceInvoiceAddress
        """
        if invoice_address is None:
            raise ValueError("Invalid value for `invoice_address`, must not be `None`")  # noqa: E501

        self._invoice_address = invoice_address

    @property
    def positions(self):
        """Gets the positions of this Q22Invoice.  # noqa: E501


        :return: The positions of this Q22Invoice.  # noqa: E501
        :rtype: list[Q22Positions]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this Q22Invoice.


        :param positions: The positions of this Q22Invoice.  # noqa: E501
        :type: list[Q22Positions]
        """
        if positions is None:
            raise ValueError("Invalid value for `positions`, must not be `None`")  # noqa: E501

        self._positions = positions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q22Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q22Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
