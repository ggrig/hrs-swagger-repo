# coding: utf-8

"""
    HPP-V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q26HotelCreditCardInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_no': 'str',
        'pcn': 'int',
        'expiry': 'str',
        'company': 'str',
        'authorization_date': 'str',
        'state': 'list[str]',
        'scheme_reference_id': 'str'
    }

    attribute_map = {
        'customer_no': 'CustomerNo',
        'pcn': 'PCN',
        'expiry': 'Expiry',
        'company': 'Company',
        'authorization_date': 'AuthorizationDate',
        'state': 'State',
        'scheme_reference_id': 'schemeReferenceID'
    }

    def __init__(self, customer_no=None, pcn=None, expiry=None, company=None, authorization_date=None, state=None, scheme_reference_id=None):  # noqa: E501
        """Q26HotelCreditCardInfo - a model defined in Swagger"""  # noqa: E501
        self._customer_no = None
        self._pcn = None
        self._expiry = None
        self._company = None
        self._authorization_date = None
        self._state = None
        self._scheme_reference_id = None
        self.discriminator = None
        self.customer_no = customer_no
        self.pcn = pcn
        self.expiry = expiry
        self.company = company
        self.authorization_date = authorization_date
        self.state = state
        self.scheme_reference_id = scheme_reference_id

    @property
    def customer_no(self):
        """Gets the customer_no of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The customer_no of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no):
        """Sets the customer_no of this Q26HotelCreditCardInfo.


        :param customer_no: The customer_no of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def pcn(self):
        """Gets the pcn of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The pcn of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: int
        """
        return self._pcn

    @pcn.setter
    def pcn(self, pcn):
        """Sets the pcn of this Q26HotelCreditCardInfo.


        :param pcn: The pcn of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: int
        """
        if pcn is None:
            raise ValueError("Invalid value for `pcn`, must not be `None`")  # noqa: E501

        self._pcn = pcn

    @property
    def expiry(self):
        """Gets the expiry of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The expiry of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this Q26HotelCreditCardInfo.


        :param expiry: The expiry of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: str
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")  # noqa: E501

        self._expiry = expiry

    @property
    def company(self):
        """Gets the company of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The company of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Q26HotelCreditCardInfo.


        :param company: The company of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def authorization_date(self):
        """Gets the authorization_date of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The authorization_date of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date):
        """Sets the authorization_date of this Q26HotelCreditCardInfo.


        :param authorization_date: The authorization_date of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: str
        """
        if authorization_date is None:
            raise ValueError("Invalid value for `authorization_date`, must not be `None`")  # noqa: E501

        self._authorization_date = authorization_date

    @property
    def state(self):
        """Gets the state of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The state of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Q26HotelCreditCardInfo.


        :param state: The state of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: list[str]
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def scheme_reference_id(self):
        """Gets the scheme_reference_id of this Q26HotelCreditCardInfo.  # noqa: E501


        :return: The scheme_reference_id of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._scheme_reference_id

    @scheme_reference_id.setter
    def scheme_reference_id(self, scheme_reference_id):
        """Sets the scheme_reference_id of this Q26HotelCreditCardInfo.


        :param scheme_reference_id: The scheme_reference_id of this Q26HotelCreditCardInfo.  # noqa: E501
        :type: str
        """
        if scheme_reference_id is None:
            raise ValueError("Invalid value for `scheme_reference_id`, must not be `None`")  # noqa: E501

        self._scheme_reference_id = scheme_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q26HotelCreditCardInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q26HotelCreditCardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
