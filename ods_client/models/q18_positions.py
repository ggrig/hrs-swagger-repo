# coding: utf-8

"""
    HPP

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Q18Positions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_cancelled': 'str',
        'case_no': 'str',
        'reservation_no': 'str',
        'position_no': 'int',
        'process_no': 'int',
        'number_of_nights': 'str',
        'number_of_rooms': 'int',
        'number_of_person': 'int',
        'number_of_breakfast': 'int',
        'room_price': 'str',
        'reservation_date_from': 'str',
        'reservation_date_to': 'str',
        'breakfast_price': 'str',
        'deduction_type': 'str'
    }

    attribute_map = {
        'is_cancelled': 'IsCancelled',
        'case_no': 'CaseNo',
        'reservation_no': 'ReservationNo',
        'position_no': 'PositionNo',
        'process_no': 'ProcessNo',
        'number_of_nights': 'NumberOfNights',
        'number_of_rooms': 'NumberOfRooms',
        'number_of_person': 'NumberOfPerson',
        'number_of_breakfast': 'NumberOfBreakfast',
        'room_price': 'RoomPrice',
        'reservation_date_from': 'ReservationDateFrom',
        'reservation_date_to': 'ReservationDateTo',
        'breakfast_price': 'BreakfastPrice',
        'deduction_type': 'DeductionType'
    }

    def __init__(self, is_cancelled=None, case_no=None, reservation_no=None, position_no=None, process_no=None, number_of_nights=None, number_of_rooms=None, number_of_person=None, number_of_breakfast=None, room_price=None, reservation_date_from=None, reservation_date_to=None, breakfast_price=None, deduction_type=None):  # noqa: E501
        """Q18Positions - a model defined in Swagger"""  # noqa: E501
        self._is_cancelled = None
        self._case_no = None
        self._reservation_no = None
        self._position_no = None
        self._process_no = None
        self._number_of_nights = None
        self._number_of_rooms = None
        self._number_of_person = None
        self._number_of_breakfast = None
        self._room_price = None
        self._reservation_date_from = None
        self._reservation_date_to = None
        self._breakfast_price = None
        self._deduction_type = None
        self.discriminator = None
        self.is_cancelled = is_cancelled
        self.case_no = case_no
        self.reservation_no = reservation_no
        self.position_no = position_no
        self.process_no = process_no
        self.number_of_nights = number_of_nights
        self.number_of_rooms = number_of_rooms
        self.number_of_person = number_of_person
        self.number_of_breakfast = number_of_breakfast
        self.room_price = room_price
        self.reservation_date_from = reservation_date_from
        self.reservation_date_to = reservation_date_to
        self.breakfast_price = breakfast_price
        self.deduction_type = deduction_type

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this Q18Positions.  # noqa: E501


        :return: The is_cancelled of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this Q18Positions.


        :param is_cancelled: The is_cancelled of this Q18Positions.  # noqa: E501
        :type: str
        """
        if is_cancelled is None:
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def case_no(self):
        """Gets the case_no of this Q18Positions.  # noqa: E501


        :return: The case_no of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._case_no

    @case_no.setter
    def case_no(self, case_no):
        """Sets the case_no of this Q18Positions.


        :param case_no: The case_no of this Q18Positions.  # noqa: E501
        :type: str
        """
        if case_no is None:
            raise ValueError("Invalid value for `case_no`, must not be `None`")  # noqa: E501

        self._case_no = case_no

    @property
    def reservation_no(self):
        """Gets the reservation_no of this Q18Positions.  # noqa: E501


        :return: The reservation_no of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no):
        """Sets the reservation_no of this Q18Positions.


        :param reservation_no: The reservation_no of this Q18Positions.  # noqa: E501
        :type: str
        """
        if reservation_no is None:
            raise ValueError("Invalid value for `reservation_no`, must not be `None`")  # noqa: E501

        self._reservation_no = reservation_no

    @property
    def position_no(self):
        """Gets the position_no of this Q18Positions.  # noqa: E501


        :return: The position_no of this Q18Positions.  # noqa: E501
        :rtype: int
        """
        return self._position_no

    @position_no.setter
    def position_no(self, position_no):
        """Sets the position_no of this Q18Positions.


        :param position_no: The position_no of this Q18Positions.  # noqa: E501
        :type: int
        """
        if position_no is None:
            raise ValueError("Invalid value for `position_no`, must not be `None`")  # noqa: E501

        self._position_no = position_no

    @property
    def process_no(self):
        """Gets the process_no of this Q18Positions.  # noqa: E501


        :return: The process_no of this Q18Positions.  # noqa: E501
        :rtype: int
        """
        return self._process_no

    @process_no.setter
    def process_no(self, process_no):
        """Sets the process_no of this Q18Positions.


        :param process_no: The process_no of this Q18Positions.  # noqa: E501
        :type: int
        """
        if process_no is None:
            raise ValueError("Invalid value for `process_no`, must not be `None`")  # noqa: E501

        self._process_no = process_no

    @property
    def number_of_nights(self):
        """Gets the number_of_nights of this Q18Positions.  # noqa: E501


        :return: The number_of_nights of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._number_of_nights

    @number_of_nights.setter
    def number_of_nights(self, number_of_nights):
        """Sets the number_of_nights of this Q18Positions.


        :param number_of_nights: The number_of_nights of this Q18Positions.  # noqa: E501
        :type: str
        """
        if number_of_nights is None:
            raise ValueError("Invalid value for `number_of_nights`, must not be `None`")  # noqa: E501

        self._number_of_nights = number_of_nights

    @property
    def number_of_rooms(self):
        """Gets the number_of_rooms of this Q18Positions.  # noqa: E501


        :return: The number_of_rooms of this Q18Positions.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms):
        """Sets the number_of_rooms of this Q18Positions.


        :param number_of_rooms: The number_of_rooms of this Q18Positions.  # noqa: E501
        :type: int
        """
        if number_of_rooms is None:
            raise ValueError("Invalid value for `number_of_rooms`, must not be `None`")  # noqa: E501

        self._number_of_rooms = number_of_rooms

    @property
    def number_of_person(self):
        """Gets the number_of_person of this Q18Positions.  # noqa: E501


        :return: The number_of_person of this Q18Positions.  # noqa: E501
        :rtype: int
        """
        return self._number_of_person

    @number_of_person.setter
    def number_of_person(self, number_of_person):
        """Sets the number_of_person of this Q18Positions.


        :param number_of_person: The number_of_person of this Q18Positions.  # noqa: E501
        :type: int
        """
        if number_of_person is None:
            raise ValueError("Invalid value for `number_of_person`, must not be `None`")  # noqa: E501

        self._number_of_person = number_of_person

    @property
    def number_of_breakfast(self):
        """Gets the number_of_breakfast of this Q18Positions.  # noqa: E501


        :return: The number_of_breakfast of this Q18Positions.  # noqa: E501
        :rtype: int
        """
        return self._number_of_breakfast

    @number_of_breakfast.setter
    def number_of_breakfast(self, number_of_breakfast):
        """Sets the number_of_breakfast of this Q18Positions.


        :param number_of_breakfast: The number_of_breakfast of this Q18Positions.  # noqa: E501
        :type: int
        """
        if number_of_breakfast is None:
            raise ValueError("Invalid value for `number_of_breakfast`, must not be `None`")  # noqa: E501

        self._number_of_breakfast = number_of_breakfast

    @property
    def room_price(self):
        """Gets the room_price of this Q18Positions.  # noqa: E501


        :return: The room_price of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price):
        """Sets the room_price of this Q18Positions.


        :param room_price: The room_price of this Q18Positions.  # noqa: E501
        :type: str
        """
        if room_price is None:
            raise ValueError("Invalid value for `room_price`, must not be `None`")  # noqa: E501

        self._room_price = room_price

    @property
    def reservation_date_from(self):
        """Gets the reservation_date_from of this Q18Positions.  # noqa: E501


        :return: The reservation_date_from of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._reservation_date_from

    @reservation_date_from.setter
    def reservation_date_from(self, reservation_date_from):
        """Sets the reservation_date_from of this Q18Positions.


        :param reservation_date_from: The reservation_date_from of this Q18Positions.  # noqa: E501
        :type: str
        """
        if reservation_date_from is None:
            raise ValueError("Invalid value for `reservation_date_from`, must not be `None`")  # noqa: E501

        self._reservation_date_from = reservation_date_from

    @property
    def reservation_date_to(self):
        """Gets the reservation_date_to of this Q18Positions.  # noqa: E501


        :return: The reservation_date_to of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._reservation_date_to

    @reservation_date_to.setter
    def reservation_date_to(self, reservation_date_to):
        """Sets the reservation_date_to of this Q18Positions.


        :param reservation_date_to: The reservation_date_to of this Q18Positions.  # noqa: E501
        :type: str
        """
        if reservation_date_to is None:
            raise ValueError("Invalid value for `reservation_date_to`, must not be `None`")  # noqa: E501

        self._reservation_date_to = reservation_date_to

    @property
    def breakfast_price(self):
        """Gets the breakfast_price of this Q18Positions.  # noqa: E501


        :return: The breakfast_price of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._breakfast_price

    @breakfast_price.setter
    def breakfast_price(self, breakfast_price):
        """Sets the breakfast_price of this Q18Positions.


        :param breakfast_price: The breakfast_price of this Q18Positions.  # noqa: E501
        :type: str
        """
        if breakfast_price is None:
            raise ValueError("Invalid value for `breakfast_price`, must not be `None`")  # noqa: E501

        self._breakfast_price = breakfast_price

    @property
    def deduction_type(self):
        """Gets the deduction_type of this Q18Positions.  # noqa: E501


        :return: The deduction_type of this Q18Positions.  # noqa: E501
        :rtype: str
        """
        return self._deduction_type

    @deduction_type.setter
    def deduction_type(self, deduction_type):
        """Sets the deduction_type of this Q18Positions.


        :param deduction_type: The deduction_type of this Q18Positions.  # noqa: E501
        :type: str
        """
        if deduction_type is None:
            raise ValueError("Invalid value for `deduction_type`, must not be `None`")  # noqa: E501

        self._deduction_type = deduction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Q18Positions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Q18Positions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
