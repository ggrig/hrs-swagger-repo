# coding: utf-8

"""
    OIP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CountriesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'code': 'str',
        'eu_country_region_code': 'str',
        'intrastat_code': 'str',
        'address_format': 'str',
        'contact_address_format': 'str',
        'global_dimension2_code': 'str',
        'customer_template_code': 'str',
        'income_cost_carrier_code': 'str',
        'eu_affiliation': 'str',
        'continent': 'str',
        'max_iban_length': 'str',
        'length_of_bank_branch_code': 'str',
        'responsibility_center': 'str',
        'iso_code': 'str',
        'culture_info': 'str',
        'signature': 'str',
        'primary_language_code': 'str',
        'bank_country_code': 'str',
        'eu_standard': 'str',
        'invoicing_in_local_currency': 'str',
        'currency_code': 'str',
        'default_length_branch_code': 'str',
        'default_length_account_no': 'str',
        'iso_bank_code': 'str',
        'accounting_period': 'str',
        'vat_registration_obligation': 'str',
        'vend_gen_bus_posting_group': 'str',
        'cust_gen_bus_posting_group': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'code': 'Code',
        'eu_country_region_code': 'EUCountryRegionCode',
        'intrastat_code': 'IntrastatCode',
        'address_format': 'AddressFormat',
        'contact_address_format': 'ContactAddressFormat',
        'global_dimension2_code': 'GlobalDimension2Code',
        'customer_template_code': 'CustomerTemplateCode',
        'income_cost_carrier_code': 'IncomeCostCarrierCode',
        'eu_affiliation': 'EUAffiliation',
        'continent': 'Continent',
        'max_iban_length': 'MaxIBANLength',
        'length_of_bank_branch_code': 'LengthOfBankBranchCode',
        'responsibility_center': 'ResponsibilityCenter',
        'iso_code': 'ISOCode',
        'culture_info': 'CultureInfo',
        'signature': 'Signature',
        'primary_language_code': 'PrimaryLanguageCode',
        'bank_country_code': 'BankCountryCode',
        'eu_standard': 'EUStandard',
        'invoicing_in_local_currency': 'InvoicingInLocalCurrency',
        'currency_code': 'CurrencyCode',
        'default_length_branch_code': 'DefaultLengthBranchCode',
        'default_length_account_no': 'DefaultLengthAccountNo',
        'iso_bank_code': 'ISOBankCode',
        'accounting_period': 'AccountingPeriod',
        'vat_registration_obligation': 'VATRegistrationObligation',
        'vend_gen_bus_posting_group': 'VendGenBusPostingGroup',
        'cust_gen_bus_posting_group': 'CustGenBusPostingGroup',
        'tenant': 'Tenant'
    }

    def __init__(self, name=None, code=None, eu_country_region_code=None, intrastat_code=None, address_format=None, contact_address_format=None, global_dimension2_code=None, customer_template_code=None, income_cost_carrier_code=None, eu_affiliation=None, continent=None, max_iban_length=None, length_of_bank_branch_code=None, responsibility_center=None, iso_code=None, culture_info=None, signature=None, primary_language_code=None, bank_country_code=None, eu_standard=None, invoicing_in_local_currency=None, currency_code=None, default_length_branch_code=None, default_length_account_no=None, iso_bank_code=None, accounting_period=None, vat_registration_obligation=None, vend_gen_bus_posting_group=None, cust_gen_bus_posting_group=None, tenant=None):  # noqa: E501
        """CountriesBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._eu_country_region_code = None
        self._intrastat_code = None
        self._address_format = None
        self._contact_address_format = None
        self._global_dimension2_code = None
        self._customer_template_code = None
        self._income_cost_carrier_code = None
        self._eu_affiliation = None
        self._continent = None
        self._max_iban_length = None
        self._length_of_bank_branch_code = None
        self._responsibility_center = None
        self._iso_code = None
        self._culture_info = None
        self._signature = None
        self._primary_language_code = None
        self._bank_country_code = None
        self._eu_standard = None
        self._invoicing_in_local_currency = None
        self._currency_code = None
        self._default_length_branch_code = None
        self._default_length_account_no = None
        self._iso_bank_code = None
        self._accounting_period = None
        self._vat_registration_obligation = None
        self._vend_gen_bus_posting_group = None
        self._cust_gen_bus_posting_group = None
        self._tenant = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if eu_country_region_code is not None:
            self.eu_country_region_code = eu_country_region_code
        if intrastat_code is not None:
            self.intrastat_code = intrastat_code
        if address_format is not None:
            self.address_format = address_format
        if contact_address_format is not None:
            self.contact_address_format = contact_address_format
        if global_dimension2_code is not None:
            self.global_dimension2_code = global_dimension2_code
        if customer_template_code is not None:
            self.customer_template_code = customer_template_code
        if income_cost_carrier_code is not None:
            self.income_cost_carrier_code = income_cost_carrier_code
        if eu_affiliation is not None:
            self.eu_affiliation = eu_affiliation
        if continent is not None:
            self.continent = continent
        if max_iban_length is not None:
            self.max_iban_length = max_iban_length
        if length_of_bank_branch_code is not None:
            self.length_of_bank_branch_code = length_of_bank_branch_code
        if responsibility_center is not None:
            self.responsibility_center = responsibility_center
        if iso_code is not None:
            self.iso_code = iso_code
        if culture_info is not None:
            self.culture_info = culture_info
        if signature is not None:
            self.signature = signature
        if primary_language_code is not None:
            self.primary_language_code = primary_language_code
        if bank_country_code is not None:
            self.bank_country_code = bank_country_code
        if eu_standard is not None:
            self.eu_standard = eu_standard
        if invoicing_in_local_currency is not None:
            self.invoicing_in_local_currency = invoicing_in_local_currency
        if currency_code is not None:
            self.currency_code = currency_code
        if default_length_branch_code is not None:
            self.default_length_branch_code = default_length_branch_code
        if default_length_account_no is not None:
            self.default_length_account_no = default_length_account_no
        if iso_bank_code is not None:
            self.iso_bank_code = iso_bank_code
        if accounting_period is not None:
            self.accounting_period = accounting_period
        if vat_registration_obligation is not None:
            self.vat_registration_obligation = vat_registration_obligation
        if vend_gen_bus_posting_group is not None:
            self.vend_gen_bus_posting_group = vend_gen_bus_posting_group
        if cust_gen_bus_posting_group is not None:
            self.cust_gen_bus_posting_group = cust_gen_bus_posting_group
        if tenant is not None:
            self.tenant = tenant

    @property
    def name(self):
        """Gets the name of this CountriesBody.  # noqa: E501

        The name of the country  # noqa: E501

        :return: The name of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountriesBody.

        The name of the country  # noqa: E501

        :param name: The name of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this CountriesBody.  # noqa: E501

        The code of the country  # noqa: E501

        :return: The code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CountriesBody.

        The code of the country  # noqa: E501

        :param code: The code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def eu_country_region_code(self):
        """Gets the eu_country_region_code of this CountriesBody.  # noqa: E501

        The EU country/region code of the country  # noqa: E501

        :return: The eu_country_region_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._eu_country_region_code

    @eu_country_region_code.setter
    def eu_country_region_code(self, eu_country_region_code):
        """Sets the eu_country_region_code of this CountriesBody.

        The EU country/region code of the country  # noqa: E501

        :param eu_country_region_code: The eu_country_region_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._eu_country_region_code = eu_country_region_code

    @property
    def intrastat_code(self):
        """Gets the intrastat_code of this CountriesBody.  # noqa: E501

        The Intrastat code of the country  # noqa: E501

        :return: The intrastat_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._intrastat_code

    @intrastat_code.setter
    def intrastat_code(self, intrastat_code):
        """Sets the intrastat_code of this CountriesBody.

        The Intrastat code of the country  # noqa: E501

        :param intrastat_code: The intrastat_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._intrastat_code = intrastat_code

    @property
    def address_format(self):
        """Gets the address_format of this CountriesBody.  # noqa: E501

        The address format of the country  # noqa: E501

        :return: The address_format of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._address_format

    @address_format.setter
    def address_format(self, address_format):
        """Sets the address_format of this CountriesBody.

        The address format of the country  # noqa: E501

        :param address_format: The address_format of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._address_format = address_format

    @property
    def contact_address_format(self):
        """Gets the contact_address_format of this CountriesBody.  # noqa: E501

        The contact address format of the country  # noqa: E501

        :return: The contact_address_format of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_address_format

    @contact_address_format.setter
    def contact_address_format(self, contact_address_format):
        """Sets the contact_address_format of this CountriesBody.

        The contact address format of the country  # noqa: E501

        :param contact_address_format: The contact_address_format of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._contact_address_format = contact_address_format

    @property
    def global_dimension2_code(self):
        """Gets the global_dimension2_code of this CountriesBody.  # noqa: E501

        The global dimension 2 code of the country  # noqa: E501

        :return: The global_dimension2_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._global_dimension2_code

    @global_dimension2_code.setter
    def global_dimension2_code(self, global_dimension2_code):
        """Sets the global_dimension2_code of this CountriesBody.

        The global dimension 2 code of the country  # noqa: E501

        :param global_dimension2_code: The global_dimension2_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._global_dimension2_code = global_dimension2_code

    @property
    def customer_template_code(self):
        """Gets the customer_template_code of this CountriesBody.  # noqa: E501

        The customer template code of the country  # noqa: E501

        :return: The customer_template_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_template_code

    @customer_template_code.setter
    def customer_template_code(self, customer_template_code):
        """Sets the customer_template_code of this CountriesBody.

        The customer template code of the country  # noqa: E501

        :param customer_template_code: The customer_template_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._customer_template_code = customer_template_code

    @property
    def income_cost_carrier_code(self):
        """Gets the income_cost_carrier_code of this CountriesBody.  # noqa: E501

        The income cost carrier code of the country  # noqa: E501

        :return: The income_cost_carrier_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._income_cost_carrier_code

    @income_cost_carrier_code.setter
    def income_cost_carrier_code(self, income_cost_carrier_code):
        """Sets the income_cost_carrier_code of this CountriesBody.

        The income cost carrier code of the country  # noqa: E501

        :param income_cost_carrier_code: The income_cost_carrier_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._income_cost_carrier_code = income_cost_carrier_code

    @property
    def eu_affiliation(self):
        """Gets the eu_affiliation of this CountriesBody.  # noqa: E501

        The EU affiliation of the country  # noqa: E501

        :return: The eu_affiliation of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._eu_affiliation

    @eu_affiliation.setter
    def eu_affiliation(self, eu_affiliation):
        """Sets the eu_affiliation of this CountriesBody.

        The EU affiliation of the country  # noqa: E501

        :param eu_affiliation: The eu_affiliation of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._eu_affiliation = eu_affiliation

    @property
    def continent(self):
        """Gets the continent of this CountriesBody.  # noqa: E501

        The continent of the country  # noqa: E501

        :return: The continent of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this CountriesBody.

        The continent of the country  # noqa: E501

        :param continent: The continent of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._continent = continent

    @property
    def max_iban_length(self):
        """Gets the max_iban_length of this CountriesBody.  # noqa: E501

        The maximum length of the IBAN in the country  # noqa: E501

        :return: The max_iban_length of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._max_iban_length

    @max_iban_length.setter
    def max_iban_length(self, max_iban_length):
        """Sets the max_iban_length of this CountriesBody.

        The maximum length of the IBAN in the country  # noqa: E501

        :param max_iban_length: The max_iban_length of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._max_iban_length = max_iban_length

    @property
    def length_of_bank_branch_code(self):
        """Gets the length_of_bank_branch_code of this CountriesBody.  # noqa: E501

        The length of the bank branch code in the country  # noqa: E501

        :return: The length_of_bank_branch_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._length_of_bank_branch_code

    @length_of_bank_branch_code.setter
    def length_of_bank_branch_code(self, length_of_bank_branch_code):
        """Sets the length_of_bank_branch_code of this CountriesBody.

        The length of the bank branch code in the country  # noqa: E501

        :param length_of_bank_branch_code: The length_of_bank_branch_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._length_of_bank_branch_code = length_of_bank_branch_code

    @property
    def responsibility_center(self):
        """Gets the responsibility_center of this CountriesBody.  # noqa: E501

        The responsibility center of the country  # noqa: E501

        :return: The responsibility_center of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._responsibility_center

    @responsibility_center.setter
    def responsibility_center(self, responsibility_center):
        """Sets the responsibility_center of this CountriesBody.

        The responsibility center of the country  # noqa: E501

        :param responsibility_center: The responsibility_center of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._responsibility_center = responsibility_center

    @property
    def iso_code(self):
        """Gets the iso_code of this CountriesBody.  # noqa: E501

        The ISO code of the country  # noqa: E501

        :return: The iso_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this CountriesBody.

        The ISO code of the country  # noqa: E501

        :param iso_code: The iso_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def culture_info(self):
        """Gets the culture_info of this CountriesBody.  # noqa: E501

        The culture info of the country  # noqa: E501

        :return: The culture_info of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._culture_info

    @culture_info.setter
    def culture_info(self, culture_info):
        """Sets the culture_info of this CountriesBody.

        The culture info of the country  # noqa: E501

        :param culture_info: The culture_info of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._culture_info = culture_info

    @property
    def signature(self):
        """Gets the signature of this CountriesBody.  # noqa: E501

        The signature of the country  # noqa: E501

        :return: The signature of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this CountriesBody.

        The signature of the country  # noqa: E501

        :param signature: The signature of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def primary_language_code(self):
        """Gets the primary_language_code of this CountriesBody.  # noqa: E501

        The primary language code of the country  # noqa: E501

        :return: The primary_language_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._primary_language_code

    @primary_language_code.setter
    def primary_language_code(self, primary_language_code):
        """Sets the primary_language_code of this CountriesBody.

        The primary language code of the country  # noqa: E501

        :param primary_language_code: The primary_language_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._primary_language_code = primary_language_code

    @property
    def bank_country_code(self):
        """Gets the bank_country_code of this CountriesBody.  # noqa: E501

        The bank country code of the country  # noqa: E501

        :return: The bank_country_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._bank_country_code

    @bank_country_code.setter
    def bank_country_code(self, bank_country_code):
        """Sets the bank_country_code of this CountriesBody.

        The bank country code of the country  # noqa: E501

        :param bank_country_code: The bank_country_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._bank_country_code = bank_country_code

    @property
    def eu_standard(self):
        """Gets the eu_standard of this CountriesBody.  # noqa: E501

        The EU standard of the country  # noqa: E501

        :return: The eu_standard of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._eu_standard

    @eu_standard.setter
    def eu_standard(self, eu_standard):
        """Sets the eu_standard of this CountriesBody.

        The EU standard of the country  # noqa: E501

        :param eu_standard: The eu_standard of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._eu_standard = eu_standard

    @property
    def invoicing_in_local_currency(self):
        """Gets the invoicing_in_local_currency of this CountriesBody.  # noqa: E501

        Indicates if invoicing is done in the local currency of the country  # noqa: E501

        :return: The invoicing_in_local_currency of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_in_local_currency

    @invoicing_in_local_currency.setter
    def invoicing_in_local_currency(self, invoicing_in_local_currency):
        """Sets the invoicing_in_local_currency of this CountriesBody.

        Indicates if invoicing is done in the local currency of the country  # noqa: E501

        :param invoicing_in_local_currency: The invoicing_in_local_currency of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._invoicing_in_local_currency = invoicing_in_local_currency

    @property
    def currency_code(self):
        """Gets the currency_code of this CountriesBody.  # noqa: E501

        The currency code of the country  # noqa: E501

        :return: The currency_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CountriesBody.

        The currency code of the country  # noqa: E501

        :param currency_code: The currency_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def default_length_branch_code(self):
        """Gets the default_length_branch_code of this CountriesBody.  # noqa: E501

        The default length of the branch code in the country  # noqa: E501

        :return: The default_length_branch_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._default_length_branch_code

    @default_length_branch_code.setter
    def default_length_branch_code(self, default_length_branch_code):
        """Sets the default_length_branch_code of this CountriesBody.

        The default length of the branch code in the country  # noqa: E501

        :param default_length_branch_code: The default_length_branch_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._default_length_branch_code = default_length_branch_code

    @property
    def default_length_account_no(self):
        """Gets the default_length_account_no of this CountriesBody.  # noqa: E501

        The default length of the account number in the country  # noqa: E501

        :return: The default_length_account_no of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._default_length_account_no

    @default_length_account_no.setter
    def default_length_account_no(self, default_length_account_no):
        """Sets the default_length_account_no of this CountriesBody.

        The default length of the account number in the country  # noqa: E501

        :param default_length_account_no: The default_length_account_no of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._default_length_account_no = default_length_account_no

    @property
    def iso_bank_code(self):
        """Gets the iso_bank_code of this CountriesBody.  # noqa: E501

        The ISO bank code of the country  # noqa: E501

        :return: The iso_bank_code of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._iso_bank_code

    @iso_bank_code.setter
    def iso_bank_code(self, iso_bank_code):
        """Sets the iso_bank_code of this CountriesBody.

        The ISO bank code of the country  # noqa: E501

        :param iso_bank_code: The iso_bank_code of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._iso_bank_code = iso_bank_code

    @property
    def accounting_period(self):
        """Gets the accounting_period of this CountriesBody.  # noqa: E501

        The accounting period of the country  # noqa: E501

        :return: The accounting_period of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._accounting_period

    @accounting_period.setter
    def accounting_period(self, accounting_period):
        """Sets the accounting_period of this CountriesBody.

        The accounting period of the country  # noqa: E501

        :param accounting_period: The accounting_period of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._accounting_period = accounting_period

    @property
    def vat_registration_obligation(self):
        """Gets the vat_registration_obligation of this CountriesBody.  # noqa: E501

        The VAT registration obligation of the country  # noqa: E501

        :return: The vat_registration_obligation of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._vat_registration_obligation

    @vat_registration_obligation.setter
    def vat_registration_obligation(self, vat_registration_obligation):
        """Sets the vat_registration_obligation of this CountriesBody.

        The VAT registration obligation of the country  # noqa: E501

        :param vat_registration_obligation: The vat_registration_obligation of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._vat_registration_obligation = vat_registration_obligation

    @property
    def vend_gen_bus_posting_group(self):
        """Gets the vend_gen_bus_posting_group of this CountriesBody.  # noqa: E501

        The vendor general business posting group of the country  # noqa: E501

        :return: The vend_gen_bus_posting_group of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._vend_gen_bus_posting_group

    @vend_gen_bus_posting_group.setter
    def vend_gen_bus_posting_group(self, vend_gen_bus_posting_group):
        """Sets the vend_gen_bus_posting_group of this CountriesBody.

        The vendor general business posting group of the country  # noqa: E501

        :param vend_gen_bus_posting_group: The vend_gen_bus_posting_group of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._vend_gen_bus_posting_group = vend_gen_bus_posting_group

    @property
    def cust_gen_bus_posting_group(self):
        """Gets the cust_gen_bus_posting_group of this CountriesBody.  # noqa: E501

        The customer general business posting group of the country  # noqa: E501

        :return: The cust_gen_bus_posting_group of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._cust_gen_bus_posting_group

    @cust_gen_bus_posting_group.setter
    def cust_gen_bus_posting_group(self, cust_gen_bus_posting_group):
        """Sets the cust_gen_bus_posting_group of this CountriesBody.

        The customer general business posting group of the country  # noqa: E501

        :param cust_gen_bus_posting_group: The cust_gen_bus_posting_group of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._cust_gen_bus_posting_group = cust_gen_bus_posting_group

    @property
    def tenant(self):
        """Gets the tenant of this CountriesBody.  # noqa: E501

        The tenant name  # noqa: E501

        :return: The tenant of this CountriesBody.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this CountriesBody.

        The tenant name  # noqa: E501

        :param tenant: The tenant of this CountriesBody.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountriesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountriesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
