# coding: utf-8

"""
    OIP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountingDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_type': 'str',
        'ledger_entry_no': 'int',
        'fapiao_no': 'str',
        'customer_no': 'int',
        'company': 'str',
        'posting_date': 'date',
        'document_no': 'str',
        'description': 'str',
        'amount_currency_code': 'str',
        'local_currency_code': 'str',
        'foreign_currency_code': 'str',
        'original_amount_net': 'float',
        'original_amount_vat': 'float',
        'original_amount_gross': 'float',
        'original_local_amount_gross': 'float',
        'original_foreign_amount_gross': 'float',
        'remaining_amount_net': 'float',
        'remaining_amount_vat': 'float',
        'remaining_amount_gross': 'float',
        'remaining_local_amount_gross': 'float',
        'remaining_foreign_amount_gross': 'float',
        'invoice_exchange_rate': 'float',
        'debitor_currency_rate': 'float',
        'exchange_rate': 'float',
        'open': 'bool',
        'confirmed': 'bool',
        'salesperson_code': 'str',
        'orig_number_of_nights': 'int',
        'invoice_address_line1': 'str',
        'invoice_address_line2': 'str',
        'invoice_address_city': 'str',
        'invoice_address_contact_no': 'str',
        'invoice_address_country_region_code': 'str',
        'invoice_address_customer_no': 'str',
        'invoice_address_email': 'str',
        'invoice_address_name': 'str',
        'invoice_address_name2': 'str',
        'invoice_address_post_code': 'str',
        'hotel_address_line1': 'str',
        'hotel_address_line2': 'str',
        'hotel_address_city': 'str',
        'hotel_address_country_region_code': 'str',
        'hotel_address_name': 'str',
        'hotel_address_name2': 'str',
        'hotel_address_post_code': 'str',
        'correction_from_document_no': 'str',
        'document_date': 'date',
        'external_document_no': 'str',
        'has_pdf': 'bool',
        'positions': 'list[Position]'
    }

    attribute_map = {
        'document_type': 'DocumentType',
        'ledger_entry_no': 'LedgerEntryNo',
        'fapiao_no': 'FapiaoNo',
        'customer_no': 'CustomerNo',
        'company': 'Company',
        'posting_date': 'PostingDate',
        'document_no': 'DocumentNo',
        'description': 'Description',
        'amount_currency_code': 'AmountCurrencyCode',
        'local_currency_code': 'LocalCurrencyCode',
        'foreign_currency_code': 'ForeignCurrencyCode',
        'original_amount_net': 'OriginalAmountNet',
        'original_amount_vat': 'OriginalAmountVAT',
        'original_amount_gross': 'OriginalAmountGross',
        'original_local_amount_gross': 'OriginalLocalAmountGross',
        'original_foreign_amount_gross': 'OriginalForeignAmountGross',
        'remaining_amount_net': 'RemainingAmountNet',
        'remaining_amount_vat': 'RemainingAmountVAT',
        'remaining_amount_gross': 'RemainingAmountGross',
        'remaining_local_amount_gross': 'RemainingLocalAmountGross',
        'remaining_foreign_amount_gross': 'RemainingForeignAmountGross',
        'invoice_exchange_rate': 'InvoiceExchangeRate',
        'debitor_currency_rate': 'DebitorCurrencyRate',
        'exchange_rate': 'ExchangeRate',
        'open': 'Open',
        'confirmed': 'Confirmed',
        'salesperson_code': 'SalespersonCode',
        'orig_number_of_nights': 'OrigNumberOfNights',
        'invoice_address_line1': 'InvoiceAddressLine1',
        'invoice_address_line2': 'InvoiceAddressLine2',
        'invoice_address_city': 'InvoiceAddressCity',
        'invoice_address_contact_no': 'InvoiceAddressContactNo',
        'invoice_address_country_region_code': 'InvoiceAddressCountryRegionCode',
        'invoice_address_customer_no': 'InvoiceAddressCustomerNo',
        'invoice_address_email': 'InvoiceAddressEmail',
        'invoice_address_name': 'InvoiceAddressName',
        'invoice_address_name2': 'InvoiceAddressName2',
        'invoice_address_post_code': 'InvoiceAddressPostCode',
        'hotel_address_line1': 'HotelAddressLine1',
        'hotel_address_line2': 'HotelAddressLine2',
        'hotel_address_city': 'HotelAddressCity',
        'hotel_address_country_region_code': 'HotelAddressCountryRegionCode',
        'hotel_address_name': 'HotelAddressName',
        'hotel_address_name2': 'HotelAddressName2',
        'hotel_address_post_code': 'HotelAddressPostCode',
        'correction_from_document_no': 'CorrectionFromDocumentNo',
        'document_date': 'DocumentDate',
        'external_document_no': 'ExternalDocumentNo',
        'has_pdf': 'HasPdf',
        'positions': 'Positions'
    }

    def __init__(self, document_type=None, ledger_entry_no=None, fapiao_no=None, customer_no=None, company=None, posting_date=None, document_no=None, description=None, amount_currency_code=None, local_currency_code=None, foreign_currency_code=None, original_amount_net=None, original_amount_vat=None, original_amount_gross=None, original_local_amount_gross=None, original_foreign_amount_gross=None, remaining_amount_net=None, remaining_amount_vat=None, remaining_amount_gross=None, remaining_local_amount_gross=None, remaining_foreign_amount_gross=None, invoice_exchange_rate=None, debitor_currency_rate=None, exchange_rate=None, open=None, confirmed=None, salesperson_code=None, orig_number_of_nights=None, invoice_address_line1=None, invoice_address_line2=None, invoice_address_city=None, invoice_address_contact_no=None, invoice_address_country_region_code=None, invoice_address_customer_no=None, invoice_address_email=None, invoice_address_name=None, invoice_address_name2=None, invoice_address_post_code=None, hotel_address_line1=None, hotel_address_line2=None, hotel_address_city=None, hotel_address_country_region_code=None, hotel_address_name=None, hotel_address_name2=None, hotel_address_post_code=None, correction_from_document_no=None, document_date=None, external_document_no=None, has_pdf=None, positions=None):  # noqa: E501
        """AccountingDocument - a model defined in Swagger"""  # noqa: E501
        self._document_type = None
        self._ledger_entry_no = None
        self._fapiao_no = None
        self._customer_no = None
        self._company = None
        self._posting_date = None
        self._document_no = None
        self._description = None
        self._amount_currency_code = None
        self._local_currency_code = None
        self._foreign_currency_code = None
        self._original_amount_net = None
        self._original_amount_vat = None
        self._original_amount_gross = None
        self._original_local_amount_gross = None
        self._original_foreign_amount_gross = None
        self._remaining_amount_net = None
        self._remaining_amount_vat = None
        self._remaining_amount_gross = None
        self._remaining_local_amount_gross = None
        self._remaining_foreign_amount_gross = None
        self._invoice_exchange_rate = None
        self._debitor_currency_rate = None
        self._exchange_rate = None
        self._open = None
        self._confirmed = None
        self._salesperson_code = None
        self._orig_number_of_nights = None
        self._invoice_address_line1 = None
        self._invoice_address_line2 = None
        self._invoice_address_city = None
        self._invoice_address_contact_no = None
        self._invoice_address_country_region_code = None
        self._invoice_address_customer_no = None
        self._invoice_address_email = None
        self._invoice_address_name = None
        self._invoice_address_name2 = None
        self._invoice_address_post_code = None
        self._hotel_address_line1 = None
        self._hotel_address_line2 = None
        self._hotel_address_city = None
        self._hotel_address_country_region_code = None
        self._hotel_address_name = None
        self._hotel_address_name2 = None
        self._hotel_address_post_code = None
        self._correction_from_document_no = None
        self._document_date = None
        self._external_document_no = None
        self._has_pdf = None
        self._positions = None
        self.discriminator = None
        self.document_type = document_type
        self.ledger_entry_no = ledger_entry_no
        if fapiao_no is not None:
            self.fapiao_no = fapiao_no
        self.customer_no = customer_no
        self.company = company
        self.posting_date = posting_date
        self.document_no = document_no
        if description is not None:
            self.description = description
        self.amount_currency_code = amount_currency_code
        self.local_currency_code = local_currency_code
        self.foreign_currency_code = foreign_currency_code
        self.original_amount_net = original_amount_net
        self.original_amount_vat = original_amount_vat
        self.original_amount_gross = original_amount_gross
        self.original_local_amount_gross = original_local_amount_gross
        self.original_foreign_amount_gross = original_foreign_amount_gross
        self.remaining_amount_net = remaining_amount_net
        self.remaining_amount_vat = remaining_amount_vat
        self.remaining_amount_gross = remaining_amount_gross
        self.remaining_local_amount_gross = remaining_local_amount_gross
        self.remaining_foreign_amount_gross = remaining_foreign_amount_gross
        self.invoice_exchange_rate = invoice_exchange_rate
        self.debitor_currency_rate = debitor_currency_rate
        self.exchange_rate = exchange_rate
        self.open = open
        self.confirmed = confirmed
        if salesperson_code is not None:
            self.salesperson_code = salesperson_code
        self.orig_number_of_nights = orig_number_of_nights
        self.invoice_address_line1 = invoice_address_line1
        if invoice_address_line2 is not None:
            self.invoice_address_line2 = invoice_address_line2
        self.invoice_address_city = invoice_address_city
        self.invoice_address_contact_no = invoice_address_contact_no
        self.invoice_address_country_region_code = invoice_address_country_region_code
        self.invoice_address_customer_no = invoice_address_customer_no
        self.invoice_address_email = invoice_address_email
        self.invoice_address_name = invoice_address_name
        if invoice_address_name2 is not None:
            self.invoice_address_name2 = invoice_address_name2
        self.invoice_address_post_code = invoice_address_post_code
        self.hotel_address_line1 = hotel_address_line1
        if hotel_address_line2 is not None:
            self.hotel_address_line2 = hotel_address_line2
        self.hotel_address_city = hotel_address_city
        self.hotel_address_country_region_code = hotel_address_country_region_code
        self.hotel_address_name = hotel_address_name
        if hotel_address_name2 is not None:
            self.hotel_address_name2 = hotel_address_name2
        self.hotel_address_post_code = hotel_address_post_code
        if correction_from_document_no is not None:
            self.correction_from_document_no = correction_from_document_no
        self.document_date = document_date
        if external_document_no is not None:
            self.external_document_no = external_document_no
        self.has_pdf = has_pdf
        if positions is not None:
            self.positions = positions

    @property
    def document_type(self):
        """Gets the document_type of this AccountingDocument.  # noqa: E501


        :return: The document_type of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this AccountingDocument.


        :param document_type: The document_type of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")  # noqa: E501

        if document_type is not None:
            allowed_values = ["Payment", "Subseq. Deb. Invoice", "Fapiao", "Commission Invoice", "Booking Overview", "Debit Collection Invoice", "Refund Invoice", "Marketplace Fee", "Sourcing Fee", "Marketing Invoice", "Invoice", "Credit Memo", "Finance Charge Memo", "Reminder", "Refund"]  # noqa: E501
            if document_type not in allowed_values:
                raise ValueError(
                    "Invalid value for `document_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(document_type, allowed_values)
                )

        self._document_type = document_type

    @property
    def ledger_entry_no(self):
        """Gets the ledger_entry_no of this AccountingDocument.  # noqa: E501

        Number of Customer Ledger Entry  # noqa: E501

        :return: The ledger_entry_no of this AccountingDocument.  # noqa: E501
        :rtype: int
        """
        return self._ledger_entry_no

    @ledger_entry_no.setter
    def ledger_entry_no(self, ledger_entry_no):
        """Sets the ledger_entry_no of this AccountingDocument.

        Number of Customer Ledger Entry  # noqa: E501

        :param ledger_entry_no: The ledger_entry_no of this AccountingDocument.  # noqa: E501
        :type: int
        """
        if ledger_entry_no is None:
            raise ValueError("Invalid value for `ledger_entry_no`, must not be `None`")  # noqa: E501

        self._ledger_entry_no = ledger_entry_no

    @property
    def fapiao_no(self):
        """Gets the fapiao_no of this AccountingDocument.  # noqa: E501


        :return: The fapiao_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._fapiao_no

    @fapiao_no.setter
    def fapiao_no(self, fapiao_no):
        """Sets the fapiao_no of this AccountingDocument.


        :param fapiao_no: The fapiao_no of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._fapiao_no = fapiao_no

    @property
    def customer_no(self):
        """Gets the customer_no of this AccountingDocument.  # noqa: E501


        :return: The customer_no of this AccountingDocument.  # noqa: E501
        :rtype: int
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no):
        """Sets the customer_no of this AccountingDocument.


        :param customer_no: The customer_no of this AccountingDocument.  # noqa: E501
        :type: int
        """
        # TND:
        # if customer_no is None:
        #     raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def company(self):
        """Gets the company of this AccountingDocument.  # noqa: E501


        :return: The company of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AccountingDocument.


        :param company: The company of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def posting_date(self):
        """Gets the posting_date of this AccountingDocument.  # noqa: E501


        :return: The posting_date of this AccountingDocument.  # noqa: E501
        :rtype: date
        """
        return self._posting_date

    @posting_date.setter
    def posting_date(self, posting_date):
        """Sets the posting_date of this AccountingDocument.


        :param posting_date: The posting_date of this AccountingDocument.  # noqa: E501
        :type: date
        """
        if posting_date is None:
            raise ValueError("Invalid value for `posting_date`, must not be `None`")  # noqa: E501

        self._posting_date = posting_date

    @property
    def document_no(self):
        """Gets the document_no of this AccountingDocument.  # noqa: E501


        :return: The document_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_no

    @document_no.setter
    def document_no(self, document_no):
        """Sets the document_no of this AccountingDocument.


        :param document_no: The document_no of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if document_no is None:
            raise ValueError("Invalid value for `document_no`, must not be `None`")  # noqa: E501

        self._document_no = document_no

    @property
    def description(self):
        """Gets the description of this AccountingDocument.  # noqa: E501


        :return: The description of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountingDocument.


        :param description: The description of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount_currency_code(self):
        """Gets the amount_currency_code of this AccountingDocument.  # noqa: E501


        :return: The amount_currency_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._amount_currency_code

    @amount_currency_code.setter
    def amount_currency_code(self, amount_currency_code):
        """Sets the amount_currency_code of this AccountingDocument.


        :param amount_currency_code: The amount_currency_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if amount_currency_code is None:
            raise ValueError("Invalid value for `amount_currency_code`, must not be `None`")  # noqa: E501

        self._amount_currency_code = amount_currency_code

    @property
    def local_currency_code(self):
        """Gets the local_currency_code of this AccountingDocument.  # noqa: E501


        :return: The local_currency_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._local_currency_code

    @local_currency_code.setter
    def local_currency_code(self, local_currency_code):
        """Sets the local_currency_code of this AccountingDocument.


        :param local_currency_code: The local_currency_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if local_currency_code is None:
            raise ValueError("Invalid value for `local_currency_code`, must not be `None`")  # noqa: E501

        self._local_currency_code = local_currency_code

    @property
    def foreign_currency_code(self):
        """Gets the foreign_currency_code of this AccountingDocument.  # noqa: E501


        :return: The foreign_currency_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency_code

    @foreign_currency_code.setter
    def foreign_currency_code(self, foreign_currency_code):
        """Sets the foreign_currency_code of this AccountingDocument.


        :param foreign_currency_code: The foreign_currency_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if foreign_currency_code is None:
            raise ValueError("Invalid value for `foreign_currency_code`, must not be `None`")  # noqa: E501

        self._foreign_currency_code = foreign_currency_code

    @property
    def original_amount_net(self):
        """Gets the original_amount_net of this AccountingDocument.  # noqa: E501


        :return: The original_amount_net of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._original_amount_net

    @original_amount_net.setter
    def original_amount_net(self, original_amount_net):
        """Sets the original_amount_net of this AccountingDocument.


        :param original_amount_net: The original_amount_net of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if original_amount_net is None:
            raise ValueError("Invalid value for `original_amount_net`, must not be `None`")  # noqa: E501

        self._original_amount_net = original_amount_net

    @property
    def original_amount_vat(self):
        """Gets the original_amount_vat of this AccountingDocument.  # noqa: E501


        :return: The original_amount_vat of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._original_amount_vat

    @original_amount_vat.setter
    def original_amount_vat(self, original_amount_vat):
        """Sets the original_amount_vat of this AccountingDocument.


        :param original_amount_vat: The original_amount_vat of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if original_amount_vat is None:
            raise ValueError("Invalid value for `original_amount_vat`, must not be `None`")  # noqa: E501

        self._original_amount_vat = original_amount_vat

    @property
    def original_amount_gross(self):
        """Gets the original_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The original_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._original_amount_gross

    @original_amount_gross.setter
    def original_amount_gross(self, original_amount_gross):
        """Sets the original_amount_gross of this AccountingDocument.


        :param original_amount_gross: The original_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if original_amount_gross is None:
            raise ValueError("Invalid value for `original_amount_gross`, must not be `None`")  # noqa: E501

        self._original_amount_gross = original_amount_gross

    @property
    def original_local_amount_gross(self):
        """Gets the original_local_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The original_local_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._original_local_amount_gross

    @original_local_amount_gross.setter
    def original_local_amount_gross(self, original_local_amount_gross):
        """Sets the original_local_amount_gross of this AccountingDocument.


        :param original_local_amount_gross: The original_local_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if original_local_amount_gross is None:
            raise ValueError("Invalid value for `original_local_amount_gross`, must not be `None`")  # noqa: E501

        self._original_local_amount_gross = original_local_amount_gross

    @property
    def original_foreign_amount_gross(self):
        """Gets the original_foreign_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The original_foreign_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._original_foreign_amount_gross

    @original_foreign_amount_gross.setter
    def original_foreign_amount_gross(self, original_foreign_amount_gross):
        """Sets the original_foreign_amount_gross of this AccountingDocument.


        :param original_foreign_amount_gross: The original_foreign_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if original_foreign_amount_gross is None:
            raise ValueError("Invalid value for `original_foreign_amount_gross`, must not be `None`")  # noqa: E501

        self._original_foreign_amount_gross = original_foreign_amount_gross

    @property
    def remaining_amount_net(self):
        """Gets the remaining_amount_net of this AccountingDocument.  # noqa: E501


        :return: The remaining_amount_net of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._remaining_amount_net

    @remaining_amount_net.setter
    def remaining_amount_net(self, remaining_amount_net):
        """Sets the remaining_amount_net of this AccountingDocument.


        :param remaining_amount_net: The remaining_amount_net of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if remaining_amount_net is None:
            raise ValueError("Invalid value for `remaining_amount_net`, must not be `None`")  # noqa: E501

        self._remaining_amount_net = remaining_amount_net

    @property
    def remaining_amount_vat(self):
        """Gets the remaining_amount_vat of this AccountingDocument.  # noqa: E501


        :return: The remaining_amount_vat of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._remaining_amount_vat

    @remaining_amount_vat.setter
    def remaining_amount_vat(self, remaining_amount_vat):
        """Sets the remaining_amount_vat of this AccountingDocument.


        :param remaining_amount_vat: The remaining_amount_vat of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if remaining_amount_vat is None:
            raise ValueError("Invalid value for `remaining_amount_vat`, must not be `None`")  # noqa: E501

        self._remaining_amount_vat = remaining_amount_vat

    @property
    def remaining_amount_gross(self):
        """Gets the remaining_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The remaining_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._remaining_amount_gross

    @remaining_amount_gross.setter
    def remaining_amount_gross(self, remaining_amount_gross):
        """Sets the remaining_amount_gross of this AccountingDocument.


        :param remaining_amount_gross: The remaining_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if remaining_amount_gross is None:
            raise ValueError("Invalid value for `remaining_amount_gross`, must not be `None`")  # noqa: E501

        self._remaining_amount_gross = remaining_amount_gross

    @property
    def remaining_local_amount_gross(self):
        """Gets the remaining_local_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The remaining_local_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._remaining_local_amount_gross

    @remaining_local_amount_gross.setter
    def remaining_local_amount_gross(self, remaining_local_amount_gross):
        """Sets the remaining_local_amount_gross of this AccountingDocument.


        :param remaining_local_amount_gross: The remaining_local_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if remaining_local_amount_gross is None:
            raise ValueError("Invalid value for `remaining_local_amount_gross`, must not be `None`")  # noqa: E501

        self._remaining_local_amount_gross = remaining_local_amount_gross

    @property
    def remaining_foreign_amount_gross(self):
        """Gets the remaining_foreign_amount_gross of this AccountingDocument.  # noqa: E501


        :return: The remaining_foreign_amount_gross of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._remaining_foreign_amount_gross

    @remaining_foreign_amount_gross.setter
    def remaining_foreign_amount_gross(self, remaining_foreign_amount_gross):
        """Sets the remaining_foreign_amount_gross of this AccountingDocument.


        :param remaining_foreign_amount_gross: The remaining_foreign_amount_gross of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if remaining_foreign_amount_gross is None:
            raise ValueError("Invalid value for `remaining_foreign_amount_gross`, must not be `None`")  # noqa: E501

        self._remaining_foreign_amount_gross = remaining_foreign_amount_gross

    @property
    def invoice_exchange_rate(self):
        """Gets the invoice_exchange_rate of this AccountingDocument.  # noqa: E501


        :return: The invoice_exchange_rate of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._invoice_exchange_rate

    @invoice_exchange_rate.setter
    def invoice_exchange_rate(self, invoice_exchange_rate):
        """Sets the invoice_exchange_rate of this AccountingDocument.


        :param invoice_exchange_rate: The invoice_exchange_rate of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if invoice_exchange_rate is None:
            raise ValueError("Invalid value for `invoice_exchange_rate`, must not be `None`")  # noqa: E501

        self._invoice_exchange_rate = invoice_exchange_rate

    @property
    def debitor_currency_rate(self):
        """Gets the debitor_currency_rate of this AccountingDocument.  # noqa: E501


        :return: The debitor_currency_rate of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._debitor_currency_rate

    @debitor_currency_rate.setter
    def debitor_currency_rate(self, debitor_currency_rate):
        """Sets the debitor_currency_rate of this AccountingDocument.


        :param debitor_currency_rate: The debitor_currency_rate of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if debitor_currency_rate is None:
            raise ValueError("Invalid value for `debitor_currency_rate`, must not be `None`")  # noqa: E501

        self._debitor_currency_rate = debitor_currency_rate

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this AccountingDocument.  # noqa: E501


        :return: The exchange_rate of this AccountingDocument.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this AccountingDocument.


        :param exchange_rate: The exchange_rate of this AccountingDocument.  # noqa: E501
        :type: float
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")  # noqa: E501

        self._exchange_rate = exchange_rate

    @property
    def open(self):
        """Gets the open of this AccountingDocument.  # noqa: E501


        :return: The open of this AccountingDocument.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this AccountingDocument.


        :param open: The open of this AccountingDocument.  # noqa: E501
        :type: bool
        """
        if open is None:
            raise ValueError("Invalid value for `open`, must not be `None`")  # noqa: E501

        self._open = open

    @property
    def confirmed(self):
        """Gets the confirmed of this AccountingDocument.  # noqa: E501


        :return: The confirmed of this AccountingDocument.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this AccountingDocument.


        :param confirmed: The confirmed of this AccountingDocument.  # noqa: E501
        :type: bool
        """
        if confirmed is None:
            raise ValueError("Invalid value for `confirmed`, must not be `None`")  # noqa: E501

        self._confirmed = confirmed

    @property
    def salesperson_code(self):
        """Gets the salesperson_code of this AccountingDocument.  # noqa: E501


        :return: The salesperson_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._salesperson_code

    @salesperson_code.setter
    def salesperson_code(self, salesperson_code):
        """Sets the salesperson_code of this AccountingDocument.


        :param salesperson_code: The salesperson_code of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._salesperson_code = salesperson_code

    @property
    def orig_number_of_nights(self):
        """Gets the orig_number_of_nights of this AccountingDocument.  # noqa: E501


        :return: The orig_number_of_nights of this AccountingDocument.  # noqa: E501
        :rtype: int
        """
        return self._orig_number_of_nights

    @orig_number_of_nights.setter
    def orig_number_of_nights(self, orig_number_of_nights):
        """Sets the orig_number_of_nights of this AccountingDocument.


        :param orig_number_of_nights: The orig_number_of_nights of this AccountingDocument.  # noqa: E501
        :type: int
        """
        if orig_number_of_nights is None:
            raise ValueError("Invalid value for `orig_number_of_nights`, must not be `None`")  # noqa: E501

        self._orig_number_of_nights = orig_number_of_nights

    @property
    def invoice_address_line1(self):
        """Gets the invoice_address_line1 of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_line1 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_line1

    @invoice_address_line1.setter
    def invoice_address_line1(self, invoice_address_line1):
        """Sets the invoice_address_line1 of this AccountingDocument.


        :param invoice_address_line1: The invoice_address_line1 of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_line1 is None:
            raise ValueError("Invalid value for `invoice_address_line1`, must not be `None`")  # noqa: E501

        self._invoice_address_line1 = invoice_address_line1

    @property
    def invoice_address_line2(self):
        """Gets the invoice_address_line2 of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_line2 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_line2

    @invoice_address_line2.setter
    def invoice_address_line2(self, invoice_address_line2):
        """Sets the invoice_address_line2 of this AccountingDocument.


        :param invoice_address_line2: The invoice_address_line2 of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._invoice_address_line2 = invoice_address_line2

    @property
    def invoice_address_city(self):
        """Gets the invoice_address_city of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_city of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_city

    @invoice_address_city.setter
    def invoice_address_city(self, invoice_address_city):
        """Sets the invoice_address_city of this AccountingDocument.


        :param invoice_address_city: The invoice_address_city of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_city is None:
            raise ValueError("Invalid value for `invoice_address_city`, must not be `None`")  # noqa: E501

        self._invoice_address_city = invoice_address_city

    @property
    def invoice_address_contact_no(self):
        """Gets the invoice_address_contact_no of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_contact_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_contact_no

    @invoice_address_contact_no.setter
    def invoice_address_contact_no(self, invoice_address_contact_no):
        """Sets the invoice_address_contact_no of this AccountingDocument.


        :param invoice_address_contact_no: The invoice_address_contact_no of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_contact_no is None:
            raise ValueError("Invalid value for `invoice_address_contact_no`, must not be `None`")  # noqa: E501

        self._invoice_address_contact_no = invoice_address_contact_no

    @property
    def invoice_address_country_region_code(self):
        """Gets the invoice_address_country_region_code of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_country_region_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_country_region_code

    @invoice_address_country_region_code.setter
    def invoice_address_country_region_code(self, invoice_address_country_region_code):
        """Sets the invoice_address_country_region_code of this AccountingDocument.


        :param invoice_address_country_region_code: The invoice_address_country_region_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_country_region_code is None:
            raise ValueError("Invalid value for `invoice_address_country_region_code`, must not be `None`")  # noqa: E501

        self._invoice_address_country_region_code = invoice_address_country_region_code

    @property
    def invoice_address_customer_no(self):
        """Gets the invoice_address_customer_no of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_customer_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_customer_no

    @invoice_address_customer_no.setter
    def invoice_address_customer_no(self, invoice_address_customer_no):
        """Sets the invoice_address_customer_no of this AccountingDocument.


        :param invoice_address_customer_no: The invoice_address_customer_no of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_customer_no is None:
            raise ValueError("Invalid value for `invoice_address_customer_no`, must not be `None`")  # noqa: E501

        self._invoice_address_customer_no = invoice_address_customer_no

    @property
    def invoice_address_email(self):
        """Gets the invoice_address_email of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_email of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_email

    @invoice_address_email.setter
    def invoice_address_email(self, invoice_address_email):
        """Sets the invoice_address_email of this AccountingDocument.


        :param invoice_address_email: The invoice_address_email of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_email is None:
            raise ValueError("Invalid value for `invoice_address_email`, must not be `None`")  # noqa: E501

        self._invoice_address_email = invoice_address_email

    @property
    def invoice_address_name(self):
        """Gets the invoice_address_name of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_name of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_name

    @invoice_address_name.setter
    def invoice_address_name(self, invoice_address_name):
        """Sets the invoice_address_name of this AccountingDocument.


        :param invoice_address_name: The invoice_address_name of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_name is None:
            raise ValueError("Invalid value for `invoice_address_name`, must not be `None`")  # noqa: E501

        self._invoice_address_name = invoice_address_name

    @property
    def invoice_address_name2(self):
        """Gets the invoice_address_name2 of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_name2 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_name2

    @invoice_address_name2.setter
    def invoice_address_name2(self, invoice_address_name2):
        """Sets the invoice_address_name2 of this AccountingDocument.


        :param invoice_address_name2: The invoice_address_name2 of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._invoice_address_name2 = invoice_address_name2

    @property
    def invoice_address_post_code(self):
        """Gets the invoice_address_post_code of this AccountingDocument.  # noqa: E501


        :return: The invoice_address_post_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address_post_code

    @invoice_address_post_code.setter
    def invoice_address_post_code(self, invoice_address_post_code):
        """Sets the invoice_address_post_code of this AccountingDocument.


        :param invoice_address_post_code: The invoice_address_post_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if invoice_address_post_code is None:
            raise ValueError("Invalid value for `invoice_address_post_code`, must not be `None`")  # noqa: E501

        self._invoice_address_post_code = invoice_address_post_code

    @property
    def hotel_address_line1(self):
        """Gets the hotel_address_line1 of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_line1 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_line1

    @hotel_address_line1.setter
    def hotel_address_line1(self, hotel_address_line1):
        """Sets the hotel_address_line1 of this AccountingDocument.


        :param hotel_address_line1: The hotel_address_line1 of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if hotel_address_line1 is None:
            raise ValueError("Invalid value for `hotel_address_line1`, must not be `None`")  # noqa: E501

        self._hotel_address_line1 = hotel_address_line1

    @property
    def hotel_address_line2(self):
        """Gets the hotel_address_line2 of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_line2 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_line2

    @hotel_address_line2.setter
    def hotel_address_line2(self, hotel_address_line2):
        """Sets the hotel_address_line2 of this AccountingDocument.


        :param hotel_address_line2: The hotel_address_line2 of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._hotel_address_line2 = hotel_address_line2

    @property
    def hotel_address_city(self):
        """Gets the hotel_address_city of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_city of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_city

    @hotel_address_city.setter
    def hotel_address_city(self, hotel_address_city):
        """Sets the hotel_address_city of this AccountingDocument.


        :param hotel_address_city: The hotel_address_city of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if hotel_address_city is None:
            raise ValueError("Invalid value for `hotel_address_city`, must not be `None`")  # noqa: E501

        self._hotel_address_city = hotel_address_city

    @property
    def hotel_address_country_region_code(self):
        """Gets the hotel_address_country_region_code of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_country_region_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_country_region_code

    @hotel_address_country_region_code.setter
    def hotel_address_country_region_code(self, hotel_address_country_region_code):
        """Sets the hotel_address_country_region_code of this AccountingDocument.


        :param hotel_address_country_region_code: The hotel_address_country_region_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if hotel_address_country_region_code is None:
            raise ValueError("Invalid value for `hotel_address_country_region_code`, must not be `None`")  # noqa: E501

        self._hotel_address_country_region_code = hotel_address_country_region_code

    @property
    def hotel_address_name(self):
        """Gets the hotel_address_name of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_name of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_name

    @hotel_address_name.setter
    def hotel_address_name(self, hotel_address_name):
        """Sets the hotel_address_name of this AccountingDocument.


        :param hotel_address_name: The hotel_address_name of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if hotel_address_name is None:
            raise ValueError("Invalid value for `hotel_address_name`, must not be `None`")  # noqa: E501

        self._hotel_address_name = hotel_address_name

    @property
    def hotel_address_name2(self):
        """Gets the hotel_address_name2 of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_name2 of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_name2

    @hotel_address_name2.setter
    def hotel_address_name2(self, hotel_address_name2):
        """Sets the hotel_address_name2 of this AccountingDocument.


        :param hotel_address_name2: The hotel_address_name2 of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._hotel_address_name2 = hotel_address_name2

    @property
    def hotel_address_post_code(self):
        """Gets the hotel_address_post_code of this AccountingDocument.  # noqa: E501


        :return: The hotel_address_post_code of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._hotel_address_post_code

    @hotel_address_post_code.setter
    def hotel_address_post_code(self, hotel_address_post_code):
        """Sets the hotel_address_post_code of this AccountingDocument.


        :param hotel_address_post_code: The hotel_address_post_code of this AccountingDocument.  # noqa: E501
        :type: str
        """
        if hotel_address_post_code is None:
            raise ValueError("Invalid value for `hotel_address_post_code`, must not be `None`")  # noqa: E501

        self._hotel_address_post_code = hotel_address_post_code

    @property
    def correction_from_document_no(self):
        """Gets the correction_from_document_no of this AccountingDocument.  # noqa: E501


        :return: The correction_from_document_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._correction_from_document_no

    @correction_from_document_no.setter
    def correction_from_document_no(self, correction_from_document_no):
        """Sets the correction_from_document_no of this AccountingDocument.


        :param correction_from_document_no: The correction_from_document_no of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._correction_from_document_no = correction_from_document_no

    @property
    def document_date(self):
        """Gets the document_date of this AccountingDocument.  # noqa: E501


        :return: The document_date of this AccountingDocument.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this AccountingDocument.


        :param document_date: The document_date of this AccountingDocument.  # noqa: E501
        :type: date
        """
        if document_date is None:
            raise ValueError("Invalid value for `document_date`, must not be `None`")  # noqa: E501

        self._document_date = document_date

    @property
    def external_document_no(self):
        """Gets the external_document_no of this AccountingDocument.  # noqa: E501


        :return: The external_document_no of this AccountingDocument.  # noqa: E501
        :rtype: str
        """
        return self._external_document_no

    @external_document_no.setter
    def external_document_no(self, external_document_no):
        """Sets the external_document_no of this AccountingDocument.


        :param external_document_no: The external_document_no of this AccountingDocument.  # noqa: E501
        :type: str
        """

        self._external_document_no = external_document_no

    @property
    def has_pdf(self):
        """Gets the has_pdf of this AccountingDocument.  # noqa: E501


        :return: The has_pdf of this AccountingDocument.  # noqa: E501
        :rtype: bool
        """
        return self._has_pdf

    @has_pdf.setter
    def has_pdf(self, has_pdf):
        """Sets the has_pdf of this AccountingDocument.


        :param has_pdf: The has_pdf of this AccountingDocument.  # noqa: E501
        :type: bool
        """
        if has_pdf is None:
            raise ValueError("Invalid value for `has_pdf`, must not be `None`")  # noqa: E501

        self._has_pdf = has_pdf

    @property
    def positions(self):
        """Gets the positions of this AccountingDocument.  # noqa: E501


        :return: The positions of this AccountingDocument.  # noqa: E501
        :rtype: list[Position]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this AccountingDocument.


        :param positions: The positions of this AccountingDocument.  # noqa: E501
        :type: list[Position]
        """

        self._positions = positions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
