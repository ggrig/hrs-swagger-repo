# coding: utf-8

"""
    OIP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalespersonBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'code': 'str',
        'description': 'str',
        'fax_extension': 'str',
        'phone_extension': 'str',
        'contact_mail': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'timestamp': 'Timestamp',
        'code': 'Code',
        'description': 'Description',
        'fax_extension': 'FaxExtension',
        'phone_extension': 'PhoneExtension',
        'contact_mail': 'ContactMail',
        'tenant': 'Tenant'
    }

    def __init__(self, timestamp=None, code=None, description=None, fax_extension=None, phone_extension=None, contact_mail=None, tenant=None):  # noqa: E501
        """SalespersonBody - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._code = None
        self._description = None
        self._fax_extension = None
        self._phone_extension = None
        self._contact_mail = None
        self._tenant = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if fax_extension is not None:
            self.fax_extension = fax_extension
        if phone_extension is not None:
            self.phone_extension = phone_extension
        if contact_mail is not None:
            self.contact_mail = contact_mail
        if tenant is not None:
            self.tenant = tenant

    @property
    def timestamp(self):
        """Gets the timestamp of this SalespersonBody.  # noqa: E501

        The timestamp of the salesperson  # noqa: E501

        :return: The timestamp of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SalespersonBody.

        The timestamp of the salesperson  # noqa: E501

        :param timestamp: The timestamp of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def code(self):
        """Gets the code of this SalespersonBody.  # noqa: E501

        The code of the salesperson  # noqa: E501

        :return: The code of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SalespersonBody.

        The code of the salesperson  # noqa: E501

        :param code: The code of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this SalespersonBody.  # noqa: E501

        The description of the salesperson  # noqa: E501

        :return: The description of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalespersonBody.

        The description of the salesperson  # noqa: E501

        :param description: The description of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fax_extension(self):
        """Gets the fax_extension of this SalespersonBody.  # noqa: E501

        The fax extension of the salesperson  # noqa: E501

        :return: The fax_extension of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._fax_extension

    @fax_extension.setter
    def fax_extension(self, fax_extension):
        """Sets the fax_extension of this SalespersonBody.

        The fax extension of the salesperson  # noqa: E501

        :param fax_extension: The fax_extension of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._fax_extension = fax_extension

    @property
    def phone_extension(self):
        """Gets the phone_extension of this SalespersonBody.  # noqa: E501

        The phone extension of the salesperson  # noqa: E501

        :return: The phone_extension of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._phone_extension

    @phone_extension.setter
    def phone_extension(self, phone_extension):
        """Sets the phone_extension of this SalespersonBody.

        The phone extension of the salesperson  # noqa: E501

        :param phone_extension: The phone_extension of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._phone_extension = phone_extension

    @property
    def contact_mail(self):
        """Gets the contact_mail of this SalespersonBody.  # noqa: E501

        The contact email of the salesperson  # noqa: E501

        :return: The contact_mail of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_mail

    @contact_mail.setter
    def contact_mail(self, contact_mail):
        """Sets the contact_mail of this SalespersonBody.

        The contact email of the salesperson  # noqa: E501

        :param contact_mail: The contact_mail of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._contact_mail = contact_mail

    @property
    def tenant(self):
        """Gets the tenant of this SalespersonBody.  # noqa: E501

        The tenant name  # noqa: E501

        :return: The tenant of this SalespersonBody.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this SalespersonBody.

        The tenant name  # noqa: E501

        :param tenant: The tenant of this SalespersonBody.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalespersonBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalespersonBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
