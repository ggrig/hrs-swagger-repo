# coding: utf-8

"""
    OIP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'process_number': 'int',
        'reservation_no': 'int',
        'position_no': 'int',
        'client_guestname1': 'str',
        'client_guestname2': 'str',
        'client_company': 'str',
        'room_type': 'int',
        'number_of_rooms': 'int',
        'number_of_person': 'int',
        'breakfast_approval_status': 'str',
        'arrival_date': 'date',
        'departure_date': 'date',
        'number_of_nights': 'int',
        'rate_description': 'str',
        'rate_type': 'int',
        'breakfast_type': 'int',
        'breakfast_price': 'float',
        'currency_factor': 'float',
        'currency_code': 'str',
        'commission_amount': 'float',
        'comission_rate': 'float',
        'room_price': 'float',
        'ranking_booster': 'float',
        'booking_quality': 'int',
        'booking_code': 'str',
        'quality_at': 'datetime',
        'quality_by_user': 'str',
        'reservation_source': 'str',
        'deduction_type': 'int',
        'calculated_with_function_id': 'str',
        'customer_no': 'str',
        'taf_line_amount': 'float',
        'agency_line_amount': 'float',
        'line_amount': 'float',
        'line_amount_including_vat': 'float',
        'amount_including_vat': 'float',
        'total_amount_including_vat': 'float'
    }

    attribute_map = {
        'company': 'Company',
        'process_number': 'ProcessNumber',
        'reservation_no': 'ReservationNo',
        'position_no': 'PositionNo',
        'client_guestname1': 'ClientGuestname1',
        'client_guestname2': 'ClientGuestname2',
        'client_company': 'ClientCompany',
        'room_type': 'RoomType',
        'number_of_rooms': 'NumberOfRooms',
        'number_of_person': 'NumberOfPerson',
        'breakfast_approval_status': 'BreakfastApprovalStatus',
        'arrival_date': 'ArrivalDate',
        'departure_date': 'DepartureDate',
        'number_of_nights': 'NumberOfNights',
        'rate_description': 'RateDescription',
        'rate_type': 'RateType',
        'breakfast_type': 'BreakfastType',
        'breakfast_price': 'BreakfastPrice',
        'currency_factor': 'CurrencyFactor',
        'currency_code': 'CurrencyCode',
        'commission_amount': 'CommissionAmount',
        'comission_rate': 'ComissionRate',
        'room_price': 'RoomPrice',
        'ranking_booster': 'RankingBooster',
        'booking_quality': 'BookingQuality',
        'booking_code': 'BookingCode',
        'quality_at': 'QualityAt',
        'quality_by_user': 'QualityByUser',
        'reservation_source': 'ReservationSource',
        'deduction_type': 'DeductionType',
        'calculated_with_function_id': 'CalculatedWithFunctionID',
        'customer_no': 'CustomerNo',
        'taf_line_amount': 'TafLineAmount',
        'agency_line_amount': 'AgencyLineAmount',
        'line_amount': 'LineAmount',
        'line_amount_including_vat': 'LineAmountIncludingVAT',
        'amount_including_vat': 'AmountIncludingVAT',
        'total_amount_including_vat': 'TotalAmountIncludingVAT'
    }

    def __init__(self, company=None, process_number=None, reservation_no=None, position_no=None, client_guestname1=None, client_guestname2=None, client_company=None, room_type=None, number_of_rooms=None, number_of_person=None, breakfast_approval_status=None, arrival_date=None, departure_date=None, number_of_nights=None, rate_description=None, rate_type=None, breakfast_type=None, breakfast_price=None, currency_factor=None, currency_code=None, commission_amount=None, comission_rate=None, room_price=None, ranking_booster=None, booking_quality=None, booking_code=None, quality_at=None, quality_by_user=None, reservation_source=None, deduction_type=None, calculated_with_function_id=None, customer_no=None, taf_line_amount=None, agency_line_amount=None, line_amount=None, line_amount_including_vat=None, amount_including_vat=None, total_amount_including_vat=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._process_number = None
        self._reservation_no = None
        self._position_no = None
        self._client_guestname1 = None
        self._client_guestname2 = None
        self._client_company = None
        self._room_type = None
        self._number_of_rooms = None
        self._number_of_person = None
        self._breakfast_approval_status = None
        self._arrival_date = None
        self._departure_date = None
        self._number_of_nights = None
        self._rate_description = None
        self._rate_type = None
        self._breakfast_type = None
        self._breakfast_price = None
        self._currency_factor = None
        self._currency_code = None
        self._commission_amount = None
        self._comission_rate = None
        self._room_price = None
        self._ranking_booster = None
        self._booking_quality = None
        self._booking_code = None
        self._quality_at = None
        self._quality_by_user = None
        self._reservation_source = None
        self._deduction_type = None
        self._calculated_with_function_id = None
        self._customer_no = None
        self._taf_line_amount = None
        self._agency_line_amount = None
        self._line_amount = None
        self._line_amount_including_vat = None
        self._amount_including_vat = None
        self._total_amount_including_vat = None
        self.discriminator = None
        self.company = company
        self.process_number = process_number
        self.reservation_no = reservation_no
        self.position_no = position_no
        self.client_guestname1 = client_guestname1
        if client_guestname2 is not None:
            self.client_guestname2 = client_guestname2
        if client_company is not None:
            self.client_company = client_company
        if room_type is not None:
            self.room_type = room_type
        if number_of_rooms is not None:
            self.number_of_rooms = number_of_rooms
        if number_of_person is not None:
            self.number_of_person = number_of_person
        if breakfast_approval_status is not None:
            self.breakfast_approval_status = breakfast_approval_status
        if arrival_date is not None:
            self.arrival_date = arrival_date
        if departure_date is not None:
            self.departure_date = departure_date
        if number_of_nights is not None:
            self.number_of_nights = number_of_nights
        if rate_description is not None:
            self.rate_description = rate_description
        if rate_type is not None:
            self.rate_type = rate_type
        if breakfast_type is not None:
            self.breakfast_type = breakfast_type
        if breakfast_price is not None:
            self.breakfast_price = breakfast_price
        if currency_factor is not None:
            self.currency_factor = currency_factor
        if currency_code is not None:
            self.currency_code = currency_code
        if commission_amount is not None:
            self.commission_amount = commission_amount
        if comission_rate is not None:
            self.comission_rate = comission_rate
        if room_price is not None:
            self.room_price = room_price
        if ranking_booster is not None:
            self.ranking_booster = ranking_booster
        if booking_quality is not None:
            self.booking_quality = booking_quality
        if booking_code is not None:
            self.booking_code = booking_code
        if quality_at is not None:
            self.quality_at = quality_at
        if quality_by_user is not None:
            self.quality_by_user = quality_by_user
        if reservation_source is not None:
            self.reservation_source = reservation_source
        if deduction_type is not None:
            self.deduction_type = deduction_type
        if calculated_with_function_id is not None:
            self.calculated_with_function_id = calculated_with_function_id
        if customer_no is not None:
            self.customer_no = customer_no
        if taf_line_amount is not None:
            self.taf_line_amount = taf_line_amount
        if agency_line_amount is not None:
            self.agency_line_amount = agency_line_amount
        if line_amount is not None:
            self.line_amount = line_amount
        if line_amount_including_vat is not None:
            self.line_amount_including_vat = line_amount_including_vat
        if amount_including_vat is not None:
            self.amount_including_vat = amount_including_vat
        if total_amount_including_vat is not None:
            self.total_amount_including_vat = total_amount_including_vat

    @property
    def company(self):
        """Gets the company of this Position.  # noqa: E501


        :return: The company of this Position.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Position.


        :param company: The company of this Position.  # noqa: E501
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def process_number(self):
        """Gets the process_number of this Position.  # noqa: E501


        :return: The process_number of this Position.  # noqa: E501
        :rtype: int
        """
        return self._process_number

    @process_number.setter
    def process_number(self, process_number):
        """Sets the process_number of this Position.


        :param process_number: The process_number of this Position.  # noqa: E501
        :type: int
        """
        if process_number is None:
            raise ValueError("Invalid value for `process_number`, must not be `None`")  # noqa: E501

        self._process_number = process_number

    @property
    def reservation_no(self):
        """Gets the reservation_no of this Position.  # noqa: E501


        :return: The reservation_no of this Position.  # noqa: E501
        :rtype: int
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no):
        """Sets the reservation_no of this Position.


        :param reservation_no: The reservation_no of this Position.  # noqa: E501
        :type: int
        """
        if reservation_no is None:
            raise ValueError("Invalid value for `reservation_no`, must not be `None`")  # noqa: E501

        self._reservation_no = reservation_no

    @property
    def position_no(self):
        """Gets the position_no of this Position.  # noqa: E501


        :return: The position_no of this Position.  # noqa: E501
        :rtype: int
        """
        return self._position_no

    @position_no.setter
    def position_no(self, position_no):
        """Sets the position_no of this Position.


        :param position_no: The position_no of this Position.  # noqa: E501
        :type: int
        """
        if position_no is None:
            raise ValueError("Invalid value for `position_no`, must not be `None`")  # noqa: E501

        self._position_no = position_no

    @property
    def client_guestname1(self):
        """Gets the client_guestname1 of this Position.  # noqa: E501


        :return: The client_guestname1 of this Position.  # noqa: E501
        :rtype: str
        """
        return self._client_guestname1

    @client_guestname1.setter
    def client_guestname1(self, client_guestname1):
        """Sets the client_guestname1 of this Position.


        :param client_guestname1: The client_guestname1 of this Position.  # noqa: E501
        :type: str
        """
        if client_guestname1 is None:
            raise ValueError("Invalid value for `client_guestname1`, must not be `None`")  # noqa: E501

        self._client_guestname1 = client_guestname1

    @property
    def client_guestname2(self):
        """Gets the client_guestname2 of this Position.  # noqa: E501


        :return: The client_guestname2 of this Position.  # noqa: E501
        :rtype: str
        """
        return self._client_guestname2

    @client_guestname2.setter
    def client_guestname2(self, client_guestname2):
        """Sets the client_guestname2 of this Position.


        :param client_guestname2: The client_guestname2 of this Position.  # noqa: E501
        :type: str
        """

        self._client_guestname2 = client_guestname2

    @property
    def client_company(self):
        """Gets the client_company of this Position.  # noqa: E501


        :return: The client_company of this Position.  # noqa: E501
        :rtype: str
        """
        return self._client_company

    @client_company.setter
    def client_company(self, client_company):
        """Sets the client_company of this Position.


        :param client_company: The client_company of this Position.  # noqa: E501
        :type: str
        """

        self._client_company = client_company

    @property
    def room_type(self):
        """Gets the room_type of this Position.  # noqa: E501


        :return: The room_type of this Position.  # noqa: E501
        :rtype: int
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this Position.


        :param room_type: The room_type of this Position.  # noqa: E501
        :type: int
        """

        self._room_type = room_type

    @property
    def number_of_rooms(self):
        """Gets the number_of_rooms of this Position.  # noqa: E501


        :return: The number_of_rooms of this Position.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms):
        """Sets the number_of_rooms of this Position.


        :param number_of_rooms: The number_of_rooms of this Position.  # noqa: E501
        :type: int
        """

        self._number_of_rooms = number_of_rooms

    @property
    def number_of_person(self):
        """Gets the number_of_person of this Position.  # noqa: E501


        :return: The number_of_person of this Position.  # noqa: E501
        :rtype: int
        """
        return self._number_of_person

    @number_of_person.setter
    def number_of_person(self, number_of_person):
        """Sets the number_of_person of this Position.


        :param number_of_person: The number_of_person of this Position.  # noqa: E501
        :type: int
        """

        self._number_of_person = number_of_person

    @property
    def breakfast_approval_status(self):
        """Gets the breakfast_approval_status of this Position.  # noqa: E501


        :return: The breakfast_approval_status of this Position.  # noqa: E501
        :rtype: str
        """
        return self._breakfast_approval_status

    @breakfast_approval_status.setter
    def breakfast_approval_status(self, breakfast_approval_status):
        """Sets the breakfast_approval_status of this Position.


        :param breakfast_approval_status: The breakfast_approval_status of this Position.  # noqa: E501
        :type: str
        """

        self._breakfast_approval_status = breakfast_approval_status

    @property
    def arrival_date(self):
        """Gets the arrival_date of this Position.  # noqa: E501


        :return: The arrival_date of this Position.  # noqa: E501
        :rtype: date
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date):
        """Sets the arrival_date of this Position.


        :param arrival_date: The arrival_date of this Position.  # noqa: E501
        :type: date
        """

        self._arrival_date = arrival_date

    @property
    def departure_date(self):
        """Gets the departure_date of this Position.  # noqa: E501


        :return: The departure_date of this Position.  # noqa: E501
        :rtype: date
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this Position.


        :param departure_date: The departure_date of this Position.  # noqa: E501
        :type: date
        """

        self._departure_date = departure_date

    @property
    def number_of_nights(self):
        """Gets the number_of_nights of this Position.  # noqa: E501


        :return: The number_of_nights of this Position.  # noqa: E501
        :rtype: int
        """
        return self._number_of_nights

    @number_of_nights.setter
    def number_of_nights(self, number_of_nights):
        """Sets the number_of_nights of this Position.


        :param number_of_nights: The number_of_nights of this Position.  # noqa: E501
        :type: int
        """

        self._number_of_nights = number_of_nights

    @property
    def rate_description(self):
        """Gets the rate_description of this Position.  # noqa: E501


        :return: The rate_description of this Position.  # noqa: E501
        :rtype: str
        """
        return self._rate_description

    @rate_description.setter
    def rate_description(self, rate_description):
        """Sets the rate_description of this Position.


        :param rate_description: The rate_description of this Position.  # noqa: E501
        :type: str
        """

        self._rate_description = rate_description

    @property
    def rate_type(self):
        """Gets the rate_type of this Position.  # noqa: E501


        :return: The rate_type of this Position.  # noqa: E501
        :rtype: int
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this Position.


        :param rate_type: The rate_type of this Position.  # noqa: E501
        :type: int
        """

        self._rate_type = rate_type

    @property
    def breakfast_type(self):
        """Gets the breakfast_type of this Position.  # noqa: E501


        :return: The breakfast_type of this Position.  # noqa: E501
        :rtype: int
        """
        return self._breakfast_type

    @breakfast_type.setter
    def breakfast_type(self, breakfast_type):
        """Sets the breakfast_type of this Position.


        :param breakfast_type: The breakfast_type of this Position.  # noqa: E501
        :type: int
        """

        self._breakfast_type = breakfast_type

    @property
    def breakfast_price(self):
        """Gets the breakfast_price of this Position.  # noqa: E501


        :return: The breakfast_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._breakfast_price

    @breakfast_price.setter
    def breakfast_price(self, breakfast_price):
        """Sets the breakfast_price of this Position.


        :param breakfast_price: The breakfast_price of this Position.  # noqa: E501
        :type: float
        """

        self._breakfast_price = breakfast_price

    @property
    def currency_factor(self):
        """Gets the currency_factor of this Position.  # noqa: E501


        :return: The currency_factor of this Position.  # noqa: E501
        :rtype: float
        """
        return self._currency_factor

    @currency_factor.setter
    def currency_factor(self, currency_factor):
        """Sets the currency_factor of this Position.


        :param currency_factor: The currency_factor of this Position.  # noqa: E501
        :type: float
        """

        self._currency_factor = currency_factor

    @property
    def currency_code(self):
        """Gets the currency_code of this Position.  # noqa: E501


        :return: The currency_code of this Position.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Position.


        :param currency_code: The currency_code of this Position.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def commission_amount(self):
        """Gets the commission_amount of this Position.  # noqa: E501


        :return: The commission_amount of this Position.  # noqa: E501
        :rtype: float
        """
        return self._commission_amount

    @commission_amount.setter
    def commission_amount(self, commission_amount):
        """Sets the commission_amount of this Position.


        :param commission_amount: The commission_amount of this Position.  # noqa: E501
        :type: float
        """

        self._commission_amount = commission_amount

    @property
    def comission_rate(self):
        """Gets the comission_rate of this Position.  # noqa: E501


        :return: The comission_rate of this Position.  # noqa: E501
        :rtype: float
        """
        return self._comission_rate

    @comission_rate.setter
    def comission_rate(self, comission_rate):
        """Sets the comission_rate of this Position.


        :param comission_rate: The comission_rate of this Position.  # noqa: E501
        :type: float
        """

        self._comission_rate = comission_rate

    @property
    def room_price(self):
        """Gets the room_price of this Position.  # noqa: E501


        :return: The room_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price):
        """Sets the room_price of this Position.


        :param room_price: The room_price of this Position.  # noqa: E501
        :type: float
        """

        self._room_price = room_price

    @property
    def ranking_booster(self):
        """Gets the ranking_booster of this Position.  # noqa: E501


        :return: The ranking_booster of this Position.  # noqa: E501
        :rtype: float
        """
        return self._ranking_booster

    @ranking_booster.setter
    def ranking_booster(self, ranking_booster):
        """Sets the ranking_booster of this Position.


        :param ranking_booster: The ranking_booster of this Position.  # noqa: E501
        :type: float
        """

        self._ranking_booster = ranking_booster

    @property
    def booking_quality(self):
        """Gets the booking_quality of this Position.  # noqa: E501


        :return: The booking_quality of this Position.  # noqa: E501
        :rtype: int
        """
        return self._booking_quality

    @booking_quality.setter
    def booking_quality(self, booking_quality):
        """Sets the booking_quality of this Position.


        :param booking_quality: The booking_quality of this Position.  # noqa: E501
        :type: int
        """

        self._booking_quality = booking_quality

    @property
    def booking_code(self):
        """Gets the booking_code of this Position.  # noqa: E501


        :return: The booking_code of this Position.  # noqa: E501
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code):
        """Sets the booking_code of this Position.


        :param booking_code: The booking_code of this Position.  # noqa: E501
        :type: str
        """

        self._booking_code = booking_code

    @property
    def quality_at(self):
        """Gets the quality_at of this Position.  # noqa: E501


        :return: The quality_at of this Position.  # noqa: E501
        :rtype: datetime
        """
        return self._quality_at

    @quality_at.setter
    def quality_at(self, quality_at):
        """Sets the quality_at of this Position.


        :param quality_at: The quality_at of this Position.  # noqa: E501
        :type: datetime
        """

        self._quality_at = quality_at

    @property
    def quality_by_user(self):
        """Gets the quality_by_user of this Position.  # noqa: E501


        :return: The quality_by_user of this Position.  # noqa: E501
        :rtype: str
        """
        return self._quality_by_user

    @quality_by_user.setter
    def quality_by_user(self, quality_by_user):
        """Sets the quality_by_user of this Position.


        :param quality_by_user: The quality_by_user of this Position.  # noqa: E501
        :type: str
        """

        self._quality_by_user = quality_by_user

    @property
    def reservation_source(self):
        """Gets the reservation_source of this Position.  # noqa: E501


        :return: The reservation_source of this Position.  # noqa: E501
        :rtype: str
        """
        return self._reservation_source

    @reservation_source.setter
    def reservation_source(self, reservation_source):
        """Sets the reservation_source of this Position.


        :param reservation_source: The reservation_source of this Position.  # noqa: E501
        :type: str
        """

        self._reservation_source = reservation_source

    @property
    def deduction_type(self):
        """Gets the deduction_type of this Position.  # noqa: E501


        :return: The deduction_type of this Position.  # noqa: E501
        :rtype: int
        """
        return self._deduction_type

    @deduction_type.setter
    def deduction_type(self, deduction_type):
        """Sets the deduction_type of this Position.


        :param deduction_type: The deduction_type of this Position.  # noqa: E501
        :type: int
        """

        self._deduction_type = deduction_type

    @property
    def calculated_with_function_id(self):
        """Gets the calculated_with_function_id of this Position.  # noqa: E501


        :return: The calculated_with_function_id of this Position.  # noqa: E501
        :rtype: str
        """
        return self._calculated_with_function_id

    @calculated_with_function_id.setter
    def calculated_with_function_id(self, calculated_with_function_id):
        """Sets the calculated_with_function_id of this Position.


        :param calculated_with_function_id: The calculated_with_function_id of this Position.  # noqa: E501
        :type: str
        """

        self._calculated_with_function_id = calculated_with_function_id

    @property
    def customer_no(self):
        """Gets the customer_no of this Position.  # noqa: E501


        :return: The customer_no of this Position.  # noqa: E501
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no):
        """Sets the customer_no of this Position.


        :param customer_no: The customer_no of this Position.  # noqa: E501
        :type: str
        """

        self._customer_no = customer_no

    @property
    def taf_line_amount(self):
        """Gets the taf_line_amount of this Position.  # noqa: E501


        :return: The taf_line_amount of this Position.  # noqa: E501
        :rtype: float
        """
        return self._taf_line_amount

    @taf_line_amount.setter
    def taf_line_amount(self, taf_line_amount):
        """Sets the taf_line_amount of this Position.


        :param taf_line_amount: The taf_line_amount of this Position.  # noqa: E501
        :type: float
        """

        self._taf_line_amount = taf_line_amount

    @property
    def agency_line_amount(self):
        """Gets the agency_line_amount of this Position.  # noqa: E501


        :return: The agency_line_amount of this Position.  # noqa: E501
        :rtype: float
        """
        return self._agency_line_amount

    @agency_line_amount.setter
    def agency_line_amount(self, agency_line_amount):
        """Sets the agency_line_amount of this Position.


        :param agency_line_amount: The agency_line_amount of this Position.  # noqa: E501
        :type: float
        """

        self._agency_line_amount = agency_line_amount

    @property
    def line_amount(self):
        """Gets the line_amount of this Position.  # noqa: E501


        :return: The line_amount of this Position.  # noqa: E501
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """Sets the line_amount of this Position.


        :param line_amount: The line_amount of this Position.  # noqa: E501
        :type: float
        """

        self._line_amount = line_amount

    @property
    def line_amount_including_vat(self):
        """Gets the line_amount_including_vat of this Position.  # noqa: E501


        :return: The line_amount_including_vat of this Position.  # noqa: E501
        :rtype: float
        """
        return self._line_amount_including_vat

    @line_amount_including_vat.setter
    def line_amount_including_vat(self, line_amount_including_vat):
        """Sets the line_amount_including_vat of this Position.


        :param line_amount_including_vat: The line_amount_including_vat of this Position.  # noqa: E501
        :type: float
        """

        self._line_amount_including_vat = line_amount_including_vat

    @property
    def amount_including_vat(self):
        """Gets the amount_including_vat of this Position.  # noqa: E501


        :return: The amount_including_vat of this Position.  # noqa: E501
        :rtype: float
        """
        return self._amount_including_vat

    @amount_including_vat.setter
    def amount_including_vat(self, amount_including_vat):
        """Sets the amount_including_vat of this Position.


        :param amount_including_vat: The amount_including_vat of this Position.  # noqa: E501
        :type: float
        """

        self._amount_including_vat = amount_including_vat

    @property
    def total_amount_including_vat(self):
        """Gets the total_amount_including_vat of this Position.  # noqa: E501


        :return: The total_amount_including_vat of this Position.  # noqa: E501
        :rtype: float
        """
        return self._total_amount_including_vat

    @total_amount_including_vat.setter
    def total_amount_including_vat(self, total_amount_including_vat):
        """Sets the total_amount_including_vat of this Position.


        :param total_amount_including_vat: The total_amount_including_vat of this Position.  # noqa: E501
        :type: float
        """

        self._total_amount_including_vat = total_amount_including_vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
